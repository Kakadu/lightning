# 2 "read.mll"
 
  module Lexing =
    (*
      We override Lexing.engine in order to avoid creating a new position
      record each time a rule is matched.
      This reduces total parsing time by about 31%.
    *)
  struct
    include Lexing

    external c_engine : lex_tables -> int -> lexbuf -> int = "caml_lex_engine"

    let engine tbl state buf =
      let result = c_engine tbl state buf in
      (*
      if result >= 0 then begin
	buf.lex_start_p <- buf.lex_curr_p;
	buf.lex_curr_p <- {buf.lex_curr_p
			   with pos_cnum = buf.lex_abs_pos + buf.lex_curr_pos};
      end;
      *)
      result
  end

  open Printf
  open Lexing
  open Common

  (* see description in common.mli *)
  type lexer_state = Common.Lexer_state.t = {
    buf : Buffer.t;
    mutable lnum : int;
    mutable bol : int;
    mutable fname : string option;
  }

  let dec c =
    Char.code c - 48

  let hex c =
    match c with
	'0'..'9' -> int_of_char c - int_of_char '0'
      | 'a'..'f' -> int_of_char c - int_of_char 'a' + 10
      | 'A'..'F' -> int_of_char c - int_of_char 'A' + 10
      | _ -> assert false

  let custom_error descr v lexbuf =
    let offs = lexbuf.lex_abs_pos in
    let bol = v.bol in
    let pos1 = offs + lexbuf.lex_start_pos - bol in
    let pos2 = max pos1 (offs + lexbuf.lex_curr_pos - bol - 1) in
    let file_line =
      match v.fname with
	  None -> "Line"
	| Some s ->
	    sprintf "File %s, line" s
    in
    let bytes =
      if pos1 = pos2 then
	sprintf "byte %i" (pos1+1)
      else
	sprintf "bytes %i-%i" (pos1+1) (pos2+1)
    in
    let msg = sprintf "%s %i, %s:\n%s" file_line v.lnum bytes descr in
    json_error msg


  let lexer_error descr v lexbuf =
    custom_error 
      (sprintf "%s '%s'" descr (Lexing.lexeme lexbuf))
      v lexbuf

  let read_junk = ref (fun _ -> assert false)

  let long_error descr v lexbuf =
    let junk = Lexing.lexeme lexbuf in
    let extra_junk = !read_junk lexbuf in
    custom_error 
      (sprintf "%s '%s%s'" descr junk extra_junk)
      v lexbuf

  let min10 = min_int / 10 - (if min_int mod 10 = 0 then 0 else 1)
  let max10 = max_int / 10 + (if max_int mod 10 = 0 then 0 else 1)

  exception Int_overflow

  let extract_positive_int lexbuf =
    let start = lexbuf.lex_start_pos in
    let stop = lexbuf.lex_curr_pos in
    let s = lexbuf.lex_buffer in
    let n = ref 0 in
    for i = start to stop - 1 do
      if !n >= max10 then
	raise Int_overflow
      else
	n := 10 * !n + dec s.[i]
    done;
    if !n < 0 then
      raise Int_overflow
    else
      !n

  let make_positive_int v lexbuf =
      try `Int (extract_positive_int lexbuf)
      with Int_overflow ->
	`Intlit (lexeme lexbuf)

  let extract_negative_int lexbuf =
    let start = lexbuf.lex_start_pos + 1 in
    let stop = lexbuf.lex_curr_pos in
    let s = lexbuf.lex_buffer in
    let n = ref 0 in
    for i = start to stop - 1 do
      if !n <= min10 then
	raise Int_overflow
      else
	n := 10 * !n - dec s.[i]
    done;
    if !n > 0 then
      raise Int_overflow
    else
      !n

  let make_negative_int v lexbuf =
      try `Int (extract_negative_int lexbuf)
      with Int_overflow ->
	`Intlit (lexeme lexbuf)


  let set_file_name v fname =
    v.fname <- fname

  let newline v lexbuf =
    v.lnum <- v.lnum + 1;
    v.bol <- lexbuf.lex_abs_pos + lexbuf.lex_curr_pos

  let add_lexeme buf lexbuf =
    let len = lexbuf.lex_curr_pos - lexbuf.lex_start_pos in
    Buffer.add_substring buf lexbuf.lex_buffer lexbuf.lex_start_pos len

  let map_lexeme f lexbuf =
    let len = lexbuf.lex_curr_pos - lexbuf.lex_start_pos in
    f lexbuf.lex_buffer lexbuf.lex_start_pos len

  type variant_kind = [ `Edgy_bracket | `Square_bracket | `Double_quote ]
  type tuple_kind = [ `Parenthesis | `Square_bracket ]

# 150 "read.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\236\255\237\255\003\000\239\255\016\000\242\255\243\255\
    \244\255\245\255\000\000\031\000\249\255\085\000\001\000\000\000\
    \000\000\001\000\000\000\001\000\002\000\255\255\000\000\000\000\
    \003\000\254\255\001\000\004\000\253\255\011\000\252\255\003\000\
    \001\000\003\000\002\000\003\000\000\000\251\255\021\000\097\000\
    \010\000\022\000\020\000\016\000\022\000\012\000\008\000\250\255\
    \119\000\129\000\139\000\161\000\171\000\181\000\193\000\209\000\
    \240\255\011\000\038\000\252\255\065\000\254\255\255\255\221\000\
    \247\255\248\255\035\001\250\255\251\255\252\255\253\255\254\255\
    \255\255\058\001\096\001\134\001\249\255\205\000\253\255\255\255\
    \217\000\145\001\215\001\218\000\194\001\014\002\037\002\075\002\
    \013\000\252\255\253\255\254\255\255\255\014\000\253\255\254\255\
    \255\255\030\000\253\255\254\255\255\255\015\000\253\255\254\255\
    \255\255\220\000\251\255\252\255\253\255\254\255\255\255\019\000\
    \252\255\253\255\254\255\015\000\255\255\016\000\255\255\012\001\
    \005\000\253\255\023\000\254\255\017\000\255\255\034\000\253\255\
    \254\255\014\000\047\000\048\000\255\255\049\000\043\000\053\000\
    \055\000\255\255\172\000\252\255\253\255\068\000\083\000\082\000\
    \099\000\255\255\093\000\087\000\102\000\254\255\101\002\252\255\
    \253\255\158\001\255\255\111\002\254\255\130\002\143\002\253\255\
    \254\255\255\255\153\002\163\002\176\002\253\255\254\255\255\255\
    \186\002\196\002\209\002\250\255\251\255\207\000\221\002\243\002\
    \095\000\110\000\015\000\255\255\177\000\177\000\173\000\179\000\
    \169\000\166\000\254\255\179\000\189\000\187\000\183\000\190\000\
    \180\000\177\000\253\255\002\003\019\003\029\003\054\003\039\003\
    \064\003\083\003\096\003\060\000\253\255\254\255\255\255\145\003\
    \252\255\253\255\220\003\255\255\216\000\253\255\254\255\255\255\
    \223\000\253\255\254\255\255\255\002\000\255\255\001\001\252\255\
    \253\255\254\255\255\255\056\000\253\255\254\255\255\255\000\000\
    \255\255\002\001\254\255\255\255\020\001\252\255\253\255\254\255\
    \255\255\075\001\251\255\252\255\253\255\254\255\255\255\180\000\
    \253\255\254\255\255\255\181\000\253\255\254\255\255\255\177\000\
    \255\255\018\001\252\255\253\255\254\255\255\255\248\000\253\255\
    \254\255\255\255\031\001\252\255\253\255\254\255\255\255\032\001\
    \253\255\254\255\255\255\033\001\253\255\254\255\255\255\238\000\
    \253\255\254\255\255\255\229\000\253\255\254\255\255\255\078\004\
    \237\255\238\255\006\000\240\255\051\001\243\255\244\255\245\255\
    \246\255\030\001\135\003\249\255\107\003\195\000\227\000\208\000\
    \229\000\219\000\217\000\235\000\255\255\244\000\238\000\016\001\
    \254\255\010\001\012\001\253\255\043\001\252\255\027\001\025\001\
    \028\001\034\001\024\001\020\001\251\255\032\001\052\001\062\001\
    \059\001\065\001\055\001\052\001\250\255\047\004\117\003\109\004\
    \163\004\145\003\173\004\183\004\193\004\241\255\012\002\021\004\
    \253\255\255\255\022\004\075\004\203\004\023\004\227\004\041\005\
    \064\005\102\005\120\003\252\255\253\255\254\255\255\255\140\005\
    \252\255\253\255\215\005\255\255\174\000\175\000\176\000\255\255\
    \177\000\178\000\219\000\222\000\224\000\225\000\226\000\227\000\
    \230\000\239\000\240\000\242\000\244\000\245\000\246\000\249\000\
    \250\000\251\000\252\000\253\000\254\000\000\001\002\001\004\001\
    \017\001\019\001\021\001\023\001\034\001\000\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\017\000\255\255\019\000\255\255\255\255\
    \255\255\255\255\007\000\007\000\255\255\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\008\000\008\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\009\000\255\255\009\000\255\255\009\000\255\255\
    \255\255\014\000\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\001\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\255\255\001\000\255\255\004\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000\255\255\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\255\255\000\000\255\255\001\000\255\255\255\255\
    \255\255\255\255\000\000\001\000\255\255\255\255\255\255\255\255\
    \000\000\001\000\255\255\255\255\255\255\003\000\003\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\255\255\003\000\
    \255\255\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\255\255\018\000\255\255\255\255\255\255\
    \255\255\007\000\007\000\255\255\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \255\255\008\000\255\255\008\000\255\255\255\255\013\000\255\255\
    \255\255\255\255\001\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\057\000\060\000\000\000\060\000\000\000\000\000\065\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\080\000\000\000\000\000\
    \083\000\255\255\255\255\083\000\255\255\255\255\255\255\255\255\
    \090\000\000\000\000\000\000\000\000\000\095\000\000\000\000\000\
    \000\000\099\000\000\000\000\000\000\000\103\000\000\000\000\000\
    \000\000\107\000\000\000\000\000\000\000\000\000\000\000\112\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\124\000\000\000\128\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\140\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\152\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\160\000\000\000\
    \000\000\000\000\255\255\255\255\166\000\000\000\000\000\000\000\
    \255\255\255\255\172\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\205\000\000\000\000\000\000\000\209\000\
    \000\000\000\000\255\255\000\000\214\000\000\000\000\000\000\000\
    \218\000\000\000\000\000\000\000\255\255\000\000\224\000\000\000\
    \000\000\000\000\000\000\229\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\238\000\000\000\000\000\000\000\
    \000\000\243\000\000\000\000\000\000\000\000\000\000\000\249\000\
    \000\000\000\000\000\000\253\000\000\000\000\000\000\000\255\255\
    \000\000\003\001\000\000\000\000\000\000\000\000\008\001\000\000\
    \000\000\000\000\012\001\000\000\000\000\000\000\000\000\017\001\
    \000\000\000\000\000\000\021\001\000\000\000\000\000\000\025\001\
    \000\000\000\000\000\000\029\001\000\000\000\000\000\000\032\001\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\086\001\090\001\
    \000\000\000\000\093\001\255\255\255\255\093\001\255\255\255\255\
    \255\255\255\255\100\001\000\000\000\000\000\000\000\000\105\001\
    \000\000\000\000\255\255\000\000\109\001\110\001\112\001\000\000\
    \113\001\114\001\115\001\116\001\117\001\118\001\119\001\120\001\
    \121\001\122\001\123\001\124\001\125\001\126\001\127\001\128\001\
    \129\001\130\001\131\001\132\001\133\001\134\001\135\001\136\001\
    \137\001\138\001\139\001\140\001\141\001\111\001";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\000\000\003\000\003\000\120\000\034\001\
    \003\000\000\000\120\000\034\001\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\125\000\000\000\113\000\000\000\000\000\
    \003\000\000\000\012\000\003\000\000\000\120\000\034\001\000\000\
    \007\000\232\000\000\000\000\000\000\000\013\000\049\000\005\000\
    \010\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\056\000\104\000\006\000\115\000\116\000\057\000\
    \000\000\123\000\000\000\049\000\000\000\048\000\124\000\092\000\
    \062\000\014\000\096\000\091\000\000\000\049\000\015\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\030\000\048\000\008\000\100\000\179\000\206\000\221\000\
    \230\000\029\000\022\000\255\255\048\000\048\000\017\000\021\000\
    \025\000\032\000\033\000\035\000\023\000\027\000\016\000\031\000\
    \028\000\034\000\019\000\024\000\018\000\026\000\020\000\036\000\
    \041\000\037\000\048\000\009\000\042\000\043\000\044\000\045\000\
    \046\000\047\000\061\000\130\000\048\000\038\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\049\000\
    \129\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\131\000\132\000\255\255\040\000\134\000\
    \135\000\136\000\055\000\137\000\055\000\146\000\048\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\143\000\048\000\144\000\
    \145\000\147\000\148\000\149\000\053\000\180\000\053\000\178\000\
    \051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\079\000\
    \051\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\079\000\079\000\196\000\109\000\072\000\
    \002\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\255\255\072\000\089\000\094\000\102\000\
    \118\000\125\000\141\000\114\000\195\000\120\000\121\000\181\000\
    \110\000\120\000\182\000\183\000\184\000\185\000\098\000\186\000\
    \142\000\188\000\127\000\189\000\190\000\191\000\059\000\192\000\
    \193\000\081\000\194\000\235\000\120\000\226\000\000\001\250\000\
    \254\000\062\001\009\001\215\000\195\000\084\000\084\000\108\000\
    \228\000\072\000\219\000\122\000\204\000\239\000\005\001\071\000\
    \240\000\255\255\030\001\070\000\060\001\057\001\053\001\014\001\
    \018\001\026\001\022\001\069\000\078\001\050\001\051\001\068\000\
    \052\001\067\000\066\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\085\001\225\000\234\000\
    \054\001\055\001\086\001\077\001\073\000\073\000\073\000\073\000\
    \073\000\073\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\245\000\056\001\058\001\246\000\
    \059\001\061\001\013\001\074\000\074\000\074\000\074\000\074\000\
    \074\000\063\001\064\001\077\001\073\000\073\000\073\000\073\000\
    \073\000\073\000\065\001\066\001\067\001\068\001\070\001\004\001\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\071\001\074\000\074\000\074\000\074\000\074\000\
    \074\000\075\000\075\000\075\000\075\000\075\000\075\000\072\001\
    \244\000\073\001\074\001\075\001\139\000\076\001\255\255\111\001\
    \111\001\111\001\111\001\083\000\248\000\252\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \083\000\075\000\075\000\075\000\075\000\075\000\075\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\078\000\156\000\157\000\
    \157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
    \213\000\255\255\255\255\111\001\106\000\064\000\111\001\217\000\
    \111\001\111\001\111\001\111\001\083\000\028\001\111\001\076\000\
    \076\000\076\000\076\000\076\000\076\000\083\000\024\001\111\001\
    \111\001\083\000\111\001\083\000\111\001\111\001\111\001\083\000\
    \007\001\111\001\111\001\111\001\111\001\111\001\111\001\083\000\
    \111\001\223\000\111\001\083\000\111\001\083\000\082\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\111\001\002\001\111\001\237\000\111\001\255\255\111\001\
    \085\000\085\000\085\000\085\000\085\000\085\000\083\000\011\001\
    \016\001\020\001\111\001\000\000\083\000\000\000\000\000\000\000\
    \083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \083\000\000\000\000\000\000\000\083\000\000\000\083\000\082\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \000\000\000\000\000\000\242\000\000\000\000\000\000\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\000\000\000\000\000\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\000\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\153\000\000\000\000\000\154\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\000\000\000\000\000\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\157\000\157\000\157\000\157\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\163\000\000\000\000\000\161\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\161\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\169\000\000\000\000\000\
    \167\000\168\000\168\000\168\000\168\000\168\000\168\000\168\000\
    \168\000\168\000\168\000\168\000\168\000\168\000\168\000\168\000\
    \168\000\168\000\168\000\168\000\167\000\168\000\168\000\168\000\
    \168\000\168\000\168\000\168\000\168\000\168\000\175\000\000\000\
    \000\000\173\000\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\196\000\255\255\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\174\000\174\000\000\000\
    \000\000\000\000\176\000\000\000\000\000\000\000\000\000\177\000\
    \000\000\000\000\195\000\173\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\202\000\000\000\202\000\
    \000\000\000\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\187\000\000\000\000\000\000\000\
    \000\000\000\000\195\000\197\000\197\000\197\000\197\000\197\000\
    \197\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\
    \197\000\197\000\197\000\197\000\197\000\197\000\197\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\200\000\198\000\200\000\000\000\151\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\198\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\000\000\000\000\159\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\000\000\041\001\042\001\042\001\042\001\042\001\
    \042\001\042\001\042\001\042\001\042\001\079\001\079\001\079\001\
    \079\001\079\001\079\001\079\001\079\001\079\001\079\001\000\000\
    \165\000\000\000\102\001\211\000\069\001\078\001\101\001\042\001\
    \042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
    \042\001\081\001\081\001\081\001\081\001\081\001\081\001\081\001\
    \081\001\081\001\081\001\000\000\077\001\000\000\000\000\000\000\
    \000\000\171\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\077\001\000\000\000\000\000\000\
    \210\000\000\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\089\001\
    \089\001\089\001\000\000\210\000\000\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\034\001\
    \035\001\000\000\084\001\034\001\084\001\000\000\000\000\083\001\
    \083\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
    \083\001\000\000\000\000\000\000\000\000\093\001\034\001\000\000\
    \043\001\091\001\094\001\094\001\000\000\000\000\038\001\000\000\
    \099\001\000\000\093\001\044\001\000\000\036\001\041\001\042\001\
    \042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
    \000\000\000\000\037\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\208\000\000\000\000\000\000\000\000\000\000\000\045\001\
    \000\000\000\000\000\000\000\000\046\001\079\001\079\001\079\001\
    \079\001\079\001\079\001\079\001\079\001\079\001\079\001\093\001\
    \000\000\039\001\000\000\000\000\000\000\093\001\000\000\000\000\
    \000\000\093\001\080\001\000\000\048\001\000\000\000\000\000\000\
    \000\000\093\001\000\000\000\000\047\001\093\001\000\000\093\001\
    \092\001\000\000\049\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\001\000\000\000\000\000\000\000\000\082\001\000\000\
    \082\001\000\000\080\001\081\001\081\001\081\001\081\001\081\001\
    \081\001\081\001\081\001\081\001\081\001\081\001\081\001\081\001\
    \081\001\081\001\081\001\081\001\081\001\081\001\081\001\083\001\
    \083\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
    \083\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
    \083\001\083\001\083\001\095\001\095\001\095\001\095\001\095\001\
    \095\001\095\001\095\001\095\001\095\001\093\001\000\000\000\000\
    \000\000\000\000\000\000\000\000\095\001\095\001\095\001\095\001\
    \095\001\095\001\093\001\000\000\000\000\088\001\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\095\001\095\001\095\001\095\001\
    \095\001\095\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\093\001\
    \000\000\000\000\000\000\000\000\000\000\093\001\000\000\000\000\
    \000\000\093\001\000\000\000\000\000\000\000\000\033\001\000\000\
    \000\000\093\001\000\000\000\000\000\000\093\001\000\000\093\001\
    \092\001\096\001\096\001\096\001\096\001\096\001\096\001\096\001\
    \096\001\096\001\096\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\096\001\096\001\096\001\096\001\096\001\096\001\
    \097\001\097\001\097\001\097\001\097\001\097\001\097\001\097\001\
    \097\001\097\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\097\001\097\001\097\001\097\001\097\001\097\001\000\000\
    \000\000\000\000\096\001\096\001\096\001\096\001\096\001\096\001\
    \000\000\000\000\000\000\000\000\000\000\000\000\093\001\093\001\
    \093\001\093\001\093\001\093\001\093\001\093\001\093\001\093\001\
    \000\000\097\001\097\001\097\001\097\001\097\001\097\001\093\001\
    \093\001\093\001\093\001\093\001\093\001\000\000\107\001\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\093\001\
    \093\001\093\001\093\001\093\001\093\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\000\000\
    \000\000\000\000\000\000\106\001\000\000\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\000\000\000\000\000\000\000\000\106\001\000\000\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\104\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\003\000\000\000\120\000\034\001\
    \003\000\255\255\120\000\034\001\255\255\057\000\255\255\255\255\
    \255\255\255\255\255\255\124\000\255\255\111\000\255\255\255\255\
    \000\000\255\255\000\000\003\000\255\255\120\000\034\001\255\255\
    \000\000\231\000\255\255\255\255\255\255\000\000\010\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\101\000\000\000\111\000\115\000\005\000\
    \255\255\122\000\255\255\038\000\255\255\010\000\122\000\088\000\
    \058\000\000\000\093\000\088\000\255\255\011\000\000\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\029\000\038\000\000\000\097\000\178\000\203\000\220\000\
    \227\000\015\000\017\000\060\000\011\000\010\000\000\000\020\000\
    \024\000\031\000\032\000\034\000\022\000\026\000\000\000\014\000\
    \027\000\033\000\018\000\023\000\000\000\016\000\019\000\035\000\
    \040\000\036\000\038\000\000\000\041\000\042\000\043\000\044\000\
    \045\000\046\000\058\000\129\000\011\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\039\000\
    \126\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\130\000\131\000\060\000\013\000\133\000\
    \134\000\135\000\048\000\136\000\048\000\141\000\039\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\142\000\039\000\143\000\
    \144\000\146\000\147\000\148\000\051\000\176\000\051\000\177\000\
    \050\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\077\000\
    \050\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\080\000\083\000\173\000\105\000\063\000\
    \000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\057\000\063\000\088\000\093\000\101\000\
    \117\000\124\000\138\000\111\000\173\000\119\000\119\000\180\000\
    \105\000\119\000\181\000\182\000\183\000\184\000\097\000\185\000\
    \138\000\187\000\126\000\188\000\189\000\190\000\058\000\191\000\
    \192\000\077\000\193\000\233\000\119\000\222\000\255\000\247\000\
    \251\000\045\001\006\001\212\000\173\000\080\000\083\000\105\000\
    \227\000\063\000\216\000\119\000\203\000\236\000\001\001\063\000\
    \236\000\060\000\027\001\063\000\046\001\047\001\048\001\010\001\
    \015\001\023\001\019\001\063\000\041\001\049\001\050\001\063\000\
    \051\001\063\000\063\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\036\001\222\000\233\000\
    \053\001\054\001\036\001\041\001\066\000\066\000\066\000\066\000\
    \066\000\066\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\241\000\055\001\057\001\241\000\
    \058\001\060\001\010\001\073\000\073\000\073\000\073\000\073\000\
    \073\000\062\001\063\001\041\001\066\000\066\000\066\000\066\000\
    \066\000\066\000\064\001\065\001\066\001\067\001\069\001\001\001\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\070\001\073\000\073\000\073\000\073\000\073\000\
    \073\000\074\000\074\000\074\000\074\000\074\000\074\000\071\001\
    \241\000\072\001\073\001\074\001\138\000\075\001\108\001\109\001\
    \110\001\112\001\113\001\081\000\247\000\251\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \081\000\074\000\074\000\074\000\074\000\074\000\074\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\077\000\153\000\153\000\
    \153\000\153\000\153\000\153\000\153\000\153\000\153\000\153\000\
    \212\000\080\000\083\000\114\001\105\000\063\000\115\001\216\000\
    \116\001\117\001\118\001\119\001\084\000\027\001\120\001\075\000\
    \075\000\075\000\075\000\075\000\075\000\081\000\023\001\121\001\
    \122\001\084\000\123\001\081\000\124\001\125\001\126\001\081\000\
    \006\001\127\001\128\001\129\001\130\001\131\001\132\001\081\000\
    \133\001\222\000\134\001\081\000\135\001\081\000\081\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\136\001\001\001\137\001\236\000\138\001\086\001\139\001\
    \082\000\082\000\082\000\082\000\082\000\082\000\084\000\010\001\
    \015\001\019\001\140\001\255\255\084\000\255\255\255\255\255\255\
    \084\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \084\000\255\255\255\255\255\255\084\000\255\255\084\000\084\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \255\255\255\255\255\255\241\000\255\255\255\255\255\255\085\000\
    \085\000\085\000\085\000\085\000\085\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\086\000\086\000\
    \086\000\086\000\086\000\086\000\255\255\255\255\255\255\085\000\
    \085\000\085\000\085\000\085\000\085\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\255\255\086\000\086\000\
    \086\000\086\000\086\000\086\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\150\000\255\255\255\255\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\255\255\255\255\255\255\087\000\087\000\087\000\087\000\
    \087\000\087\000\157\000\157\000\157\000\157\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\158\000\255\255\255\255\158\000\
    \158\000\158\000\158\000\158\000\158\000\158\000\158\000\158\000\
    \158\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\164\000\255\255\255\255\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
    \164\000\164\000\168\000\168\000\168\000\168\000\168\000\168\000\
    \168\000\168\000\168\000\168\000\169\000\169\000\169\000\169\000\
    \169\000\169\000\169\000\169\000\169\000\169\000\170\000\255\255\
    \255\255\170\000\170\000\170\000\170\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\174\000\086\001\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\174\000\174\000\255\255\
    \255\255\255\255\170\000\255\255\255\255\255\255\255\255\170\000\
    \255\255\255\255\174\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\175\000\195\000\255\255\195\000\
    \255\255\255\255\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\175\000\255\255\255\255\255\255\
    \255\255\255\255\174\000\196\000\196\000\196\000\196\000\196\000\
    \196\000\196\000\196\000\196\000\196\000\197\000\197\000\197\000\
    \197\000\197\000\197\000\197\000\197\000\197\000\197\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\198\000\197\000\198\000\255\255\150\000\198\000\198\000\
    \198\000\198\000\198\000\198\000\198\000\198\000\198\000\198\000\
    \200\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
    \200\000\200\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\197\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\255\255\255\255\158\000\
    \202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\
    \202\000\202\000\255\255\044\001\044\001\044\001\044\001\044\001\
    \044\001\044\001\044\001\044\001\044\001\078\001\078\001\078\001\
    \078\001\078\001\078\001\078\001\078\001\078\001\078\001\255\255\
    \164\000\255\255\098\001\207\000\044\001\042\001\098\001\042\001\
    \042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
    \042\001\081\001\081\001\081\001\081\001\081\001\081\001\081\001\
    \081\001\081\001\081\001\255\255\042\001\255\255\255\255\255\255\
    \255\255\170\000\207\000\207\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\207\000\207\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\207\000\207\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\207\000\207\000\042\001\255\255\255\255\255\255\
    \207\000\255\255\207\000\207\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\207\000\207\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\207\000\207\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\207\000\207\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\087\001\
    \090\001\093\001\255\255\210\000\255\255\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\031\001\
    \031\001\255\255\077\001\031\001\077\001\255\255\255\255\077\001\
    \077\001\077\001\077\001\077\001\077\001\077\001\077\001\077\001\
    \077\001\255\255\255\255\255\255\255\255\091\001\031\001\255\255\
    \031\001\087\001\090\001\093\001\255\255\255\255\031\001\255\255\
    \098\001\255\255\091\001\031\001\255\255\031\001\031\001\031\001\
    \031\001\031\001\031\001\031\001\031\001\031\001\031\001\031\001\
    \255\255\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\207\000\255\255\255\255\255\255\255\255\255\255\031\001\
    \255\255\255\255\255\255\255\255\031\001\079\001\079\001\079\001\
    \079\001\079\001\079\001\079\001\079\001\079\001\079\001\091\001\
    \255\255\031\001\255\255\255\255\255\255\091\001\255\255\255\255\
    \255\255\091\001\079\001\255\255\031\001\255\255\255\255\255\255\
    \255\255\091\001\255\255\255\255\031\001\091\001\255\255\091\001\
    \091\001\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\031\001\255\255\255\255\255\255\255\255\080\001\255\255\
    \080\001\255\255\079\001\080\001\080\001\080\001\080\001\080\001\
    \080\001\080\001\080\001\080\001\080\001\082\001\082\001\082\001\
    \082\001\082\001\082\001\082\001\082\001\082\001\082\001\083\001\
    \083\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
    \083\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
    \084\001\084\001\084\001\092\001\092\001\092\001\092\001\092\001\
    \092\001\092\001\092\001\092\001\092\001\094\001\255\255\255\255\
    \255\255\255\255\255\255\255\255\092\001\092\001\092\001\092\001\
    \092\001\092\001\094\001\255\255\255\255\087\001\090\001\093\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\092\001\092\001\092\001\092\001\
    \092\001\092\001\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\094\001\
    \255\255\255\255\255\255\255\255\255\255\094\001\255\255\255\255\
    \255\255\094\001\255\255\255\255\255\255\255\255\031\001\255\255\
    \255\255\094\001\255\255\255\255\255\255\094\001\255\255\094\001\
    \094\001\095\001\095\001\095\001\095\001\095\001\095\001\095\001\
    \095\001\095\001\095\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\095\001\095\001\095\001\095\001\095\001\095\001\
    \096\001\096\001\096\001\096\001\096\001\096\001\096\001\096\001\
    \096\001\096\001\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\096\001\096\001\096\001\096\001\096\001\096\001\255\255\
    \255\255\255\255\095\001\095\001\095\001\095\001\095\001\095\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\097\001\097\001\
    \097\001\097\001\097\001\097\001\097\001\097\001\097\001\097\001\
    \255\255\096\001\096\001\096\001\096\001\096\001\096\001\097\001\
    \097\001\097\001\097\001\097\001\097\001\255\255\103\001\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\097\001\
    \097\001\097\001\097\001\097\001\097\001\103\001\103\001\103\001\
    \103\001\103\001\103\001\103\001\103\001\103\001\103\001\103\001\
    \103\001\103\001\103\001\103\001\103\001\103\001\103\001\103\001\
    \103\001\103\001\103\001\103\001\103\001\103\001\103\001\255\255\
    \255\255\255\255\255\255\103\001\255\255\103\001\103\001\103\001\
    \103\001\103\001\103\001\103\001\103\001\103\001\103\001\103\001\
    \103\001\103\001\103\001\103\001\103\001\103\001\103\001\103\001\
    \103\001\103\001\103\001\103\001\103\001\103\001\103\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\255\255\255\255\255\255\255\255\106\001\255\255\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
    \106\001\106\001\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\103\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read_json v lexbuf =
    __ocaml_lex_read_json_rec v lexbuf 0
and __ocaml_lex_read_json_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 178 "read.mll"
                ( `Bool true )
# 768 "read.ml"

  | 1 ->
# 179 "read.mll"
                ( `Bool false )
# 773 "read.ml"

  | 2 ->
# 180 "read.mll"
                ( `Null )
# 778 "read.ml"

  | 3 ->
# 181 "read.mll"
                (
                    `Float nan
                )
# 785 "read.ml"

  | 4 ->
# 184 "read.mll"
                (
                    `Float infinity
                )
# 792 "read.ml"

  | 5 ->
# 187 "read.mll"
                (
                    `Float neg_infinity
                )
# 799 "read.ml"

  | 6 ->
# 190 "read.mll"
                (
	            Buffer.clear v.buf;
		    `String (finish_string v lexbuf)
                )
# 807 "read.ml"

  | 7 ->
# 194 "read.mll"
                         ( make_positive_int v lexbuf )
# 812 "read.ml"

  | 8 ->
# 195 "read.mll"
                         ( make_negative_int v lexbuf )
# 817 "read.ml"

  | 9 ->
# 196 "read.mll"
                (
                    `Float (float_of_string (lexeme lexbuf))
                 )
# 824 "read.ml"

  | 10 ->
# 200 "read.mll"
                 ( let acc = ref [] in
		   try
		     read_space v lexbuf;
		     read_object_end lexbuf;
		     let field_name = read_ident v lexbuf in
		     read_space v lexbuf;
		     read_colon v lexbuf;
		     read_space v lexbuf;
		     acc := (field_name, read_json v lexbuf) :: !acc;
		     while true do
		       read_space v lexbuf;
		       read_object_sep v lexbuf;
		       read_space v lexbuf;
		       let field_name = read_ident v lexbuf in
		       read_space v lexbuf;
		       read_colon v lexbuf;
		       read_space v lexbuf;
		       acc := (field_name, read_json v lexbuf) :: !acc;
		     done;
		     assert false
		   with End_of_object ->
		     `Assoc (List.rev !acc)
		 )
# 851 "read.ml"

  | 11 ->
# 224 "read.mll"
                 ( let acc = ref [] in
		   try
		     read_space v lexbuf;
		     read_array_end lexbuf;
		     acc := read_json v lexbuf :: !acc;
		     while true do
		       read_space v lexbuf;
		       read_array_sep v lexbuf;
		       read_space v lexbuf;
		       acc := read_json v lexbuf :: !acc;
		     done;
		     assert false
		   with End_of_array ->
		     `List (List.rev !acc)
		 )
# 870 "read.ml"

  | 12 ->
# 240 "read.mll"
                 (
		     long_error "Invalid token" v lexbuf
		 )
# 877 "read.ml"

  | 13 ->
# 244 "read.mll"
                 (
                     long_error "Invalid token" v lexbuf
		 )
# 884 "read.ml"

  | 14 ->
# 248 "read.mll"
                 ( read_json v lexbuf )
# 889 "read.ml"

  | 15 ->
# 249 "read.mll"
                 ( finish_comment v lexbuf; read_json v lexbuf )
# 894 "read.ml"

  | 16 ->
# 250 "read.mll"
                 ( newline v lexbuf; read_json v lexbuf )
# 899 "read.ml"

  | 17 ->
# 251 "read.mll"
                 ( read_json v lexbuf )
# 904 "read.ml"

  | 18 ->
# 252 "read.mll"
                 ( custom_error "Unexpected end of input" v lexbuf )
# 909 "read.ml"

  | 19 ->
# 253 "read.mll"
                 ( long_error "Invalid token" v lexbuf )
# 914 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_json_rec v lexbuf __ocaml_lex_state

and finish_string v lexbuf =
    __ocaml_lex_finish_string_rec v lexbuf 58
and __ocaml_lex_finish_string_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 257 "read.mll"
                  ( Buffer.contents v.buf )
# 925 "read.ml"

  | 1 ->
# 258 "read.mll"
                  ( finish_escaped_char v lexbuf;
		    finish_string v lexbuf )
# 931 "read.ml"

  | 2 ->
# 260 "read.mll"
                  ( add_lexeme v.buf lexbuf;
		    finish_string v lexbuf )
# 937 "read.ml"

  | 3 ->
# 262 "read.mll"
                  ( custom_error "Unexpected end of input" v lexbuf )
# 942 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_string_rec v lexbuf __ocaml_lex_state

and finish_escaped_char v lexbuf =
    __ocaml_lex_finish_escaped_char_rec v lexbuf 63
and __ocaml_lex_finish_escaped_char_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 278 "read.mll"
           c
# 954 "read.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 278 "read.mll"
             ( Buffer.add_char v.buf c )
# 958 "read.ml"

  | 1 ->
# 279 "read.mll"
         ( Buffer.add_char v.buf '\b' )
# 963 "read.ml"

  | 2 ->
# 280 "read.mll"
         ( Buffer.add_char v.buf '\012' )
# 968 "read.ml"

  | 3 ->
# 281 "read.mll"
         ( Buffer.add_char v.buf '\n' )
# 973 "read.ml"

  | 4 ->
# 282 "read.mll"
         ( Buffer.add_char v.buf '\r' )
# 978 "read.ml"

  | 5 ->
# 283 "read.mll"
         ( Buffer.add_char v.buf '\t' )
# 983 "read.ml"

  | 6 ->
let
# 284 "read.mll"
                a
# 989 "read.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 284 "read.mll"
                           b
# 994 "read.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 284 "read.mll"
                                      c
# 999 "read.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3)
and
# 284 "read.mll"
                                                 d
# 1004 "read.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 4) in
# 285 "read.mll"
         ( Common.utf8_of_bytes v.buf (hex a) (hex b) (hex c) (hex d) )
# 1008 "read.ml"

  | 7 ->
# 286 "read.mll"
         ( long_error "Invalid escape sequence" v lexbuf )
# 1013 "read.ml"

  | 8 ->
# 287 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 1018 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_escaped_char_rec v lexbuf __ocaml_lex_state

and finish_stringlit v lexbuf =
    __ocaml_lex_finish_stringlit_rec v lexbuf 77
and __ocaml_lex_finish_stringlit_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 293 "read.mll"
         ( let len = lexbuf.lex_curr_pos - lexbuf.lex_start_pos in
	   let s = String.create (len+1) in
	   s.[0] <- '"';
	   String.blit lexbuf.lex_buffer lexbuf.lex_start_pos s 1 len;
	   s
	 )
# 1034 "read.ml"

  | 1 ->
# 299 "read.mll"
         ( long_error "Invalid string literal" v lexbuf )
# 1039 "read.ml"

  | 2 ->
# 300 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 1044 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_stringlit_rec v lexbuf __ocaml_lex_state

and finish_variant v lexbuf =
    __ocaml_lex_finish_variant_rec v lexbuf 88
and __ocaml_lex_finish_variant_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 303 "read.mll"
         ( let x = read_json v lexbuf in
	   read_space v lexbuf;
	   read_gt v lexbuf;
	   Some x )
# 1058 "read.ml"

  | 1 ->
# 307 "read.mll"
         ( None )
# 1063 "read.ml"

  | 2 ->
# 308 "read.mll"
         ( long_error "Expected ':' or '>' but found" v lexbuf )
# 1068 "read.ml"

  | 3 ->
# 309 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 1073 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_variant_rec v lexbuf __ocaml_lex_state

and read_lt v lexbuf =
    __ocaml_lex_read_lt_rec v lexbuf 93
and __ocaml_lex_read_lt_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 312 "read.mll"
             ( () )
# 1084 "read.ml"

  | 1 ->
# 313 "read.mll"
             ( long_error "Expected '<' but found" v lexbuf )
# 1089 "read.ml"

  | 2 ->
# 314 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1094 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_lt_rec v lexbuf __ocaml_lex_state

and read_gt v lexbuf =
    __ocaml_lex_read_gt_rec v lexbuf 97
and __ocaml_lex_read_gt_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 317 "read.mll"
         ( () )
# 1105 "read.ml"

  | 1 ->
# 318 "read.mll"
         ( long_error "Expected '>' but found" v lexbuf )
# 1110 "read.ml"

  | 2 ->
# 319 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 1115 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_gt_rec v lexbuf __ocaml_lex_state

and read_comma v lexbuf =
    __ocaml_lex_read_comma_rec v lexbuf 101
and __ocaml_lex_read_comma_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 322 "read.mll"
         ( () )
# 1126 "read.ml"

  | 1 ->
# 323 "read.mll"
         ( long_error "Expected ',' but found" v lexbuf )
# 1131 "read.ml"

  | 2 ->
# 324 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 1136 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_comma_rec v lexbuf __ocaml_lex_state

and start_any_variant v lexbuf =
    __ocaml_lex_start_any_variant_rec v lexbuf 105
and __ocaml_lex_start_any_variant_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 327 "read.mll"
             ( `Edgy_bracket )
# 1147 "read.ml"

  | 1 ->
# 328 "read.mll"
             ( Buffer.clear v.buf;
	       `Double_quote )
# 1153 "read.ml"

  | 2 ->
# 330 "read.mll"
             ( `Square_bracket )
# 1158 "read.ml"

  | 3 ->
# 331 "read.mll"
             ( long_error "Expected '<', '\"' or '[' but found" v lexbuf )
# 1163 "read.ml"

  | 4 ->
# 332 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1168 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_any_variant_rec v lexbuf __ocaml_lex_state

and finish_comment v lexbuf =
    __ocaml_lex_finish_comment_rec v lexbuf 111
and __ocaml_lex_finish_comment_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 335 "read.mll"
         ( () )
# 1179 "read.ml"

  | 1 ->
# 336 "read.mll"
         ( long_error "Unterminated comment" v lexbuf )
# 1184 "read.ml"

  | 2 ->
# 337 "read.mll"
         ( newline v lexbuf; finish_comment v lexbuf )
# 1189 "read.ml"

  | 3 ->
# 338 "read.mll"
         ( finish_comment v lexbuf )
# 1194 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_comment_rec v lexbuf __ocaml_lex_state

and read_eof lexbuf =
    __ocaml_lex_read_eof_rec lexbuf 117
and __ocaml_lex_read_eof_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 346 "read.mll"
              ( true )
# 1205 "read.ml"

  | 1 ->
# 347 "read.mll"
              ( false )
# 1210 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_eof_rec lexbuf __ocaml_lex_state

and read_space v lexbuf =
    __ocaml_lex_read_space_rec v lexbuf 119
and __ocaml_lex_read_space_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 350 "read.mll"
                             ( newline v lexbuf; read_space v lexbuf )
# 1221 "read.ml"

  | 1 ->
# 351 "read.mll"
                             ( finish_comment v lexbuf; read_space v lexbuf )
# 1226 "read.ml"

  | 2 ->
# 352 "read.mll"
                             ( newline v lexbuf; read_space v lexbuf )
# 1231 "read.ml"

  | 3 ->
# 353 "read.mll"
                             ( read_space v lexbuf )
# 1236 "read.ml"

  | 4 ->
# 354 "read.mll"
                             ( () )
# 1241 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_space_rec v lexbuf __ocaml_lex_state

and read_null v lexbuf =
    __ocaml_lex_read_null_rec v lexbuf 126
and __ocaml_lex_read_null_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 357 "read.mll"
              ( () )
# 1252 "read.ml"

  | 1 ->
# 358 "read.mll"
              ( long_error "Expected 'null' but found" v lexbuf )
# 1257 "read.ml"

  | 2 ->
# 359 "read.mll"
              ( custom_error "Unexpected end of input" v lexbuf )
# 1262 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_null_rec v lexbuf __ocaml_lex_state

and read_null_if_possible v lexbuf =
    __ocaml_lex_read_null_if_possible_rec v lexbuf 133
and __ocaml_lex_read_null_if_possible_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 362 "read.mll"
              ( true )
# 1273 "read.ml"

  | 1 ->
# 363 "read.mll"
              ( false )
# 1278 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_null_if_possible_rec v lexbuf __ocaml_lex_state

and read_bool v lexbuf =
    __ocaml_lex_read_bool_rec v lexbuf 138
and __ocaml_lex_read_bool_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 366 "read.mll"
              ( true )
# 1289 "read.ml"

  | 1 ->
# 367 "read.mll"
              ( false )
# 1294 "read.ml"

  | 2 ->
# 368 "read.mll"
              ( long_error "Expected 'true' or 'false' but found" v lexbuf )
# 1299 "read.ml"

  | 3 ->
# 369 "read.mll"
              ( custom_error "Unexpected end of input" v lexbuf )
# 1304 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_bool_rec v lexbuf __ocaml_lex_state

and read_int v lexbuf =
    __ocaml_lex_read_int_rec v lexbuf 150
and __ocaml_lex_read_int_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 372 "read.mll"
                         ( try extract_positive_int lexbuf
			   with Int_overflow ->
			     lexer_error "Int overflow" v lexbuf )
# 1317 "read.ml"

  | 1 ->
# 375 "read.mll"
                         ( try extract_negative_int lexbuf
			   with Int_overflow ->
			     lexer_error "Int overflow" v lexbuf )
# 1324 "read.ml"

  | 2 ->
# 378 "read.mll"
                         ( long_error "Expected integer but found" v lexbuf )
# 1329 "read.ml"

  | 3 ->
# 379 "read.mll"
                         ( custom_error "Unexpected end of input" v lexbuf )
# 1334 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_int_rec v lexbuf __ocaml_lex_state

and read_int32 v lexbuf =
    __ocaml_lex_read_int32_rec v lexbuf 158
and __ocaml_lex_read_int32_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 382 "read.mll"
                         ( try Int32.of_string (Lexing.lexeme lexbuf)
			   with _ ->
			     lexer_error "Int32 overflow" v lexbuf )
# 1347 "read.ml"

  | 1 ->
# 385 "read.mll"
                         ( long_error "Expected int32 but found" v lexbuf )
# 1352 "read.ml"

  | 2 ->
# 386 "read.mll"
                         ( custom_error "Unexpected end of input" v lexbuf )
# 1357 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_int32_rec v lexbuf __ocaml_lex_state

and read_int64 v lexbuf =
    __ocaml_lex_read_int64_rec v lexbuf 164
and __ocaml_lex_read_int64_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 389 "read.mll"
                         ( try Int64.of_string (Lexing.lexeme lexbuf)
			   with _ ->
			     lexer_error "Int32 overflow" v lexbuf )
# 1370 "read.ml"

  | 1 ->
# 392 "read.mll"
                         ( long_error "Expected int64 but found" v lexbuf )
# 1375 "read.ml"

  | 2 ->
# 393 "read.mll"
                         ( custom_error "Unexpected end of input" v lexbuf )
# 1380 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_int64_rec v lexbuf __ocaml_lex_state

and read_number v lexbuf =
    __ocaml_lex_read_number_rec v lexbuf 170
and __ocaml_lex_read_number_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 396 "read.mll"
                ( nan )
# 1391 "read.ml"

  | 1 ->
# 397 "read.mll"
                ( infinity )
# 1396 "read.ml"

  | 2 ->
# 398 "read.mll"
                ( neg_infinity )
# 1401 "read.ml"

  | 3 ->
# 399 "read.mll"
                ( float_of_string (lexeme lexbuf) )
# 1406 "read.ml"

  | 4 ->
# 400 "read.mll"
                ( long_error "Expected number but found" v lexbuf )
# 1411 "read.ml"

  | 5 ->
# 401 "read.mll"
                ( custom_error "Unexpected end of input" v lexbuf )
# 1416 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_number_rec v lexbuf __ocaml_lex_state

and read_string v lexbuf =
    __ocaml_lex_read_string_rec v lexbuf 203
and __ocaml_lex_read_string_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 404 "read.mll"
             ( Buffer.clear v.buf;
	       finish_string v lexbuf )
# 1428 "read.ml"

  | 1 ->
# 406 "read.mll"
             ( long_error "Expected '\"' but found" v lexbuf )
# 1433 "read.ml"

  | 2 ->
# 407 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1438 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_string_rec v lexbuf __ocaml_lex_state

and read_ident v lexbuf =
    __ocaml_lex_read_ident_rec v lexbuf 207
and __ocaml_lex_read_ident_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 410 "read.mll"
             ( Buffer.clear v.buf;
	       finish_string v lexbuf )
# 1450 "read.ml"

  | 1 ->
let
# 412 "read.mll"
             s
# 1456 "read.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 413 "read.mll"
             ( s )
# 1460 "read.ml"

  | 2 ->
# 414 "read.mll"
             ( long_error "Expected string or identifier but found" v lexbuf )
# 1465 "read.ml"

  | 3 ->
# 415 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1470 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_ident_rec v lexbuf __ocaml_lex_state

and read_sequence read_cell init_acc v lexbuf =
    __ocaml_lex_read_sequence_rec read_cell init_acc v lexbuf 212
and __ocaml_lex_read_sequence_rec read_cell init_acc v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 428 "read.mll"
             ( let acc = ref init_acc in
	       try
		 read_space v lexbuf;
		 read_array_end lexbuf;
		 acc := read_cell !acc v lexbuf;
		 while true do
		   read_space v lexbuf;
		   read_array_sep v lexbuf;
		   read_space v lexbuf;
		   acc := read_cell !acc v lexbuf;
		 done;
		 assert false
	       with End_of_array ->
		 !acc
	     )
# 1495 "read.ml"

  | 1 ->
# 443 "read.mll"
             ( long_error "Expected '[' but found" v lexbuf )
# 1500 "read.ml"

  | 2 ->
# 444 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1505 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_sequence_rec read_cell init_acc v lexbuf __ocaml_lex_state

and read_list_rev read_cell v lexbuf =
    __ocaml_lex_read_list_rev_rec read_cell v lexbuf 216
and __ocaml_lex_read_list_rev_rec read_cell v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 447 "read.mll"
             ( let acc = ref [] in
	       try
		 read_space v lexbuf;
		 read_array_end lexbuf;
		 acc := read_cell v lexbuf :: !acc;
		 while true do
		   read_space v lexbuf;
		   read_array_sep v lexbuf;
		   read_space v lexbuf;
		   acc := read_cell v lexbuf :: !acc;
		 done;
		 assert false
	       with End_of_array ->
		 !acc
	     )
# 1530 "read.ml"

  | 1 ->
# 462 "read.mll"
             ( long_error "Expected '[' but found" v lexbuf )
# 1535 "read.ml"

  | 2 ->
# 463 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1540 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_list_rev_rec read_cell v lexbuf __ocaml_lex_state

and read_array_end lexbuf =
    __ocaml_lex_read_array_end_rec lexbuf 220
and __ocaml_lex_read_array_end_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 466 "read.mll"
             ( raise End_of_array )
# 1551 "read.ml"

  | 1 ->
# 467 "read.mll"
             ( () )
# 1556 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_array_end_rec lexbuf __ocaml_lex_state

and read_array_sep v lexbuf =
    __ocaml_lex_read_array_sep_rec v lexbuf 222
and __ocaml_lex_read_array_sep_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 470 "read.mll"
             ( () )
# 1567 "read.ml"

  | 1 ->
# 471 "read.mll"
             ( raise End_of_array )
# 1572 "read.ml"

  | 2 ->
# 472 "read.mll"
             ( long_error "Expected ',' or ']' but found" v lexbuf )
# 1577 "read.ml"

  | 3 ->
# 473 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1582 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_array_sep_rec v lexbuf __ocaml_lex_state

and read_tuple read_cell init_acc v lexbuf =
    __ocaml_lex_read_tuple_rec read_cell init_acc v lexbuf 227
and __ocaml_lex_read_tuple_rec read_cell init_acc v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 477 "read.mll"
                 (
		     long_error "Invalid token" v lexbuf
		 )
# 1595 "read.ml"

  | 1 ->
# 480 "read.mll"
             ( long_error "Expected ')' but found" v lexbuf )
# 1600 "read.ml"

  | 2 ->
# 481 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1605 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_tuple_rec read_cell init_acc v lexbuf __ocaml_lex_state

and read_tuple_end lexbuf =
    __ocaml_lex_read_tuple_end_rec lexbuf 231
and __ocaml_lex_read_tuple_end_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 484 "read.mll"
             ( raise End_of_tuple )
# 1616 "read.ml"

  | 1 ->
# 485 "read.mll"
             ( () )
# 1621 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_tuple_end_rec lexbuf __ocaml_lex_state

and read_tuple_end2 v std lexbuf =
    __ocaml_lex_read_tuple_end2_rec v std lexbuf 233
and __ocaml_lex_read_tuple_end2_rec v std lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 488 "read.mll"
             ( if std then 
                 long_error "Expected ')' or '' but found" v lexbuf
               else
                 raise End_of_tuple )
# 1635 "read.ml"

  | 1 ->
# 492 "read.mll"
             ( if std then 
                 raise End_of_tuple
               else
                 long_error "Expected ']' or '' but found" v lexbuf )
# 1643 "read.ml"

  | 2 ->
# 496 "read.mll"
             ( () )
# 1648 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_tuple_end2_rec v std lexbuf __ocaml_lex_state

and read_tuple_sep v lexbuf =
    __ocaml_lex_read_tuple_sep_rec v lexbuf 236
and __ocaml_lex_read_tuple_sep_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 499 "read.mll"
             ( () )
# 1659 "read.ml"

  | 1 ->
# 500 "read.mll"
             ( raise End_of_tuple )
# 1664 "read.ml"

  | 2 ->
# 501 "read.mll"
             ( long_error "Expected ',' or ')' but found" v lexbuf )
# 1669 "read.ml"

  | 3 ->
# 502 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1674 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_tuple_sep_rec v lexbuf __ocaml_lex_state

and read_tuple_sep2 v std lexbuf =
    __ocaml_lex_read_tuple_sep2_rec v std lexbuf 241
and __ocaml_lex_read_tuple_sep2_rec v std lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 505 "read.mll"
             ( () )
# 1685 "read.ml"

  | 1 ->
# 506 "read.mll"
             ( if std then 
                 long_error "Expected ',' or ']' but found" v lexbuf
               else
                 raise End_of_tuple )
# 1693 "read.ml"

  | 2 ->
# 510 "read.mll"
             ( if std then 
                 raise End_of_tuple
               else
                 long_error "Expected ',' or ')' but found" v lexbuf )
# 1701 "read.ml"

  | 3 ->
# 514 "read.mll"
             ( long_error "Expected ',' or ')' but found" v lexbuf )
# 1706 "read.ml"

  | 4 ->
# 515 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1711 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_tuple_sep2_rec v std lexbuf __ocaml_lex_state

and read_fields read_field init_acc v lexbuf =
    __ocaml_lex_read_fields_rec read_field init_acc v lexbuf 247
and __ocaml_lex_read_fields_rec read_field init_acc v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 518 "read.mll"
             ( let acc = ref init_acc in
	       try
		 read_space v lexbuf;
		 read_object_end lexbuf;
		 let field_name = read_ident v lexbuf in
		 read_space v lexbuf;
		 read_colon v lexbuf;
		 read_space v lexbuf;
		 acc := read_field !acc field_name v lexbuf;
		 while true do
		   read_space v lexbuf;
		   read_object_sep v lexbuf;
		   read_space v lexbuf;
		   let field_name = read_ident v lexbuf in
		   read_space v lexbuf;
		   read_colon v lexbuf;
		   read_space v lexbuf;
		   acc := read_field !acc field_name v lexbuf;
		 done;
		 assert false
	       with End_of_object ->
		 !acc
	     )
# 1744 "read.ml"

  | 1 ->
# 541 "read.mll"
             ( long_error "Expected '{' but found" v lexbuf )
# 1749 "read.ml"

  | 2 ->
# 542 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1754 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_fields_rec read_field init_acc v lexbuf __ocaml_lex_state

and read_lcurl v lexbuf =
    __ocaml_lex_read_lcurl_rec v lexbuf 251
and __ocaml_lex_read_lcurl_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 545 "read.mll"
             ( () )
# 1765 "read.ml"

  | 1 ->
# 546 "read.mll"
             ( long_error "Expected '{' but found" v lexbuf )
# 1770 "read.ml"

  | 2 ->
# 547 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1775 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_lcurl_rec v lexbuf __ocaml_lex_state

and read_object_end lexbuf =
    __ocaml_lex_read_object_end_rec lexbuf 255
and __ocaml_lex_read_object_end_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 550 "read.mll"
             ( raise End_of_object )
# 1786 "read.ml"

  | 1 ->
# 551 "read.mll"
             ( () )
# 1791 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_object_end_rec lexbuf __ocaml_lex_state

and read_object_sep v lexbuf =
    __ocaml_lex_read_object_sep_rec v lexbuf 257
and __ocaml_lex_read_object_sep_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 554 "read.mll"
             ( () )
# 1802 "read.ml"

  | 1 ->
# 555 "read.mll"
             ( raise End_of_object )
# 1807 "read.ml"

  | 2 ->
# 556 "read.mll"
             ( long_error "Expected ',' or '}' but found" v lexbuf )
# 1812 "read.ml"

  | 3 ->
# 557 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1817 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_object_sep_rec v lexbuf __ocaml_lex_state

and read_colon v lexbuf =
    __ocaml_lex_read_colon_rec v lexbuf 262
and __ocaml_lex_read_colon_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 560 "read.mll"
             ( () )
# 1828 "read.ml"

  | 1 ->
# 561 "read.mll"
             ( long_error "Expected ':' but found" v lexbuf )
# 1833 "read.ml"

  | 2 ->
# 562 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1838 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_colon_rec v lexbuf __ocaml_lex_state

and start_any_tuple v lexbuf =
    __ocaml_lex_start_any_tuple_rec v lexbuf 266
and __ocaml_lex_start_any_tuple_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 565 "read.mll"
             ( false )
# 1849 "read.ml"

  | 1 ->
# 566 "read.mll"
             ( true )
# 1854 "read.ml"

  | 2 ->
# 567 "read.mll"
             ( long_error "Expected '(' or '[' but found" v lexbuf )
# 1859 "read.ml"

  | 3 ->
# 568 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1864 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_any_tuple_rec v lexbuf __ocaml_lex_state

and read_lpar v lexbuf =
    __ocaml_lex_read_lpar_rec v lexbuf 271
and __ocaml_lex_read_lpar_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 571 "read.mll"
             ( () )
# 1875 "read.ml"

  | 1 ->
# 572 "read.mll"
             ( long_error "Expected '(' but found" v lexbuf )
# 1880 "read.ml"

  | 2 ->
# 573 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1885 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_lpar_rec v lexbuf __ocaml_lex_state

and read_rpar v lexbuf =
    __ocaml_lex_read_rpar_rec v lexbuf 275
and __ocaml_lex_read_rpar_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 576 "read.mll"
             ( () )
# 1896 "read.ml"

  | 1 ->
# 577 "read.mll"
             ( long_error "Expected ')' but found" v lexbuf )
# 1901 "read.ml"

  | 2 ->
# 578 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1906 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_rpar_rec v lexbuf __ocaml_lex_state

and read_lbr v lexbuf =
    __ocaml_lex_read_lbr_rec v lexbuf 279
and __ocaml_lex_read_lbr_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 581 "read.mll"
             ( () )
# 1917 "read.ml"

  | 1 ->
# 582 "read.mll"
             ( long_error "Expected '[' but found" v lexbuf )
# 1922 "read.ml"

  | 2 ->
# 583 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1927 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_lbr_rec v lexbuf __ocaml_lex_state

and read_rbr v lexbuf =
    __ocaml_lex_read_rbr_rec v lexbuf 283
and __ocaml_lex_read_rbr_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 586 "read.mll"
             ( () )
# 1938 "read.ml"

  | 1 ->
# 587 "read.mll"
             ( long_error "Expected ']' but found" v lexbuf )
# 1943 "read.ml"

  | 2 ->
# 588 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 1948 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_rbr_rec v lexbuf __ocaml_lex_state

and skip_json v lexbuf =
    __ocaml_lex_skip_json_rec v lexbuf 287
and __ocaml_lex_skip_json_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 594 "read.mll"
                ( () )
# 1959 "read.ml"

  | 1 ->
# 595 "read.mll"
                ( () )
# 1964 "read.ml"

  | 2 ->
# 596 "read.mll"
                ( () )
# 1969 "read.ml"

  | 3 ->
# 597 "read.mll"
                ( () )
# 1974 "read.ml"

  | 4 ->
# 598 "read.mll"
                ( () )
# 1979 "read.ml"

  | 5 ->
# 599 "read.mll"
                ( () )
# 1984 "read.ml"

  | 6 ->
# 600 "read.mll"
                ( finish_skip_stringlit v lexbuf )
# 1989 "read.ml"

  | 7 ->
# 601 "read.mll"
                          ( () )
# 1994 "read.ml"

  | 8 ->
# 602 "read.mll"
                ( () )
# 1999 "read.ml"

  | 9 ->
# 604 "read.mll"
                 ( try
		     read_space v lexbuf;
		     read_object_end lexbuf;
		     skip_ident v lexbuf;
		     read_space v lexbuf;
		     read_colon v lexbuf;
		     read_space v lexbuf;
		     skip_json v lexbuf;
		     while true do
		       read_space v lexbuf;
		       read_object_sep v lexbuf;
		       read_space v lexbuf;
		       skip_ident v lexbuf;
		       read_space v lexbuf;
		       read_colon v lexbuf;
		       read_space v lexbuf;
		       skip_json v lexbuf;
		     done;
		     assert false
		   with End_of_object ->
		     ()
		 )
# 2025 "read.ml"

  | 10 ->
# 627 "read.mll"
                 ( try
		     read_space v lexbuf;
		     read_array_end lexbuf;
		     skip_json v lexbuf;
		     while true do
		       read_space v lexbuf;
		       read_array_sep v lexbuf;
		       read_space v lexbuf;
		       skip_json v lexbuf;
		     done;
		     assert false
		   with End_of_array ->
		     ()
		 )
# 2043 "read.ml"

  | 11 ->
# 642 "read.mll"
                 (
		     long_error "Invalid token" v lexbuf
		 )
# 2050 "read.ml"

  | 12 ->
# 646 "read.mll"
                 (
                     long_error "Invalid token" v lexbuf
		 )
# 2057 "read.ml"

  | 13 ->
# 650 "read.mll"
                 ( skip_json v lexbuf )
# 2062 "read.ml"

  | 14 ->
# 651 "read.mll"
                 ( finish_comment v lexbuf; skip_json v lexbuf )
# 2067 "read.ml"

  | 15 ->
# 652 "read.mll"
                 ( newline v lexbuf; skip_json v lexbuf )
# 2072 "read.ml"

  | 16 ->
# 653 "read.mll"
                 ( skip_json v lexbuf )
# 2077 "read.ml"

  | 17 ->
# 654 "read.mll"
                 ( custom_error "Unexpected end of input" v lexbuf )
# 2082 "read.ml"

  | 18 ->
# 655 "read.mll"
                 ( long_error "Invalid token" v lexbuf )
# 2087 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_skip_json_rec v lexbuf __ocaml_lex_state

and finish_skip_stringlit v lexbuf =
    __ocaml_lex_finish_skip_stringlit_rec v lexbuf 343
and __ocaml_lex_finish_skip_stringlit_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 661 "read.mll"
         ( () )
# 2098 "read.ml"

  | 1 ->
# 662 "read.mll"
         ( long_error "Invalid string literal" v lexbuf )
# 2103 "read.ml"

  | 2 ->
# 663 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 2108 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_skip_stringlit_rec v lexbuf __ocaml_lex_state

and finish_skip_variant v lexbuf =
    __ocaml_lex_finish_skip_variant_rec v lexbuf 354
and __ocaml_lex_finish_skip_variant_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 666 "read.mll"
         ( skip_json v lexbuf;
	   read_space v lexbuf;
	   read_gt v lexbuf )
# 2121 "read.ml"

  | 1 ->
# 669 "read.mll"
         ( () )
# 2126 "read.ml"

  | 2 ->
# 670 "read.mll"
         ( long_error "Expected ':' or '>' but found" v lexbuf )
# 2131 "read.ml"

  | 3 ->
# 671 "read.mll"
         ( custom_error "Unexpected end of input" v lexbuf )
# 2136 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_finish_skip_variant_rec v lexbuf __ocaml_lex_state

and skip_ident v lexbuf =
    __ocaml_lex_skip_ident_rec v lexbuf 359
and __ocaml_lex_skip_ident_rec v lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 674 "read.mll"
             ( finish_skip_stringlit v lexbuf )
# 2147 "read.ml"

  | 1 ->
# 675 "read.mll"
             ( () )
# 2152 "read.ml"

  | 2 ->
# 676 "read.mll"
             ( long_error "Expected string or identifier but found" v lexbuf )
# 2157 "read.ml"

  | 3 ->
# 677 "read.mll"
             ( custom_error "Unexpected end of input" v lexbuf )
# 2162 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_skip_ident_rec v lexbuf __ocaml_lex_state

and junk lexbuf =
    __ocaml_lex_junk_rec lexbuf 364
and __ocaml_lex_junk_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 680 "read.mll"
             ( Lexing.lexeme lexbuf )
# 2173 "read.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_junk_rec lexbuf __ocaml_lex_state

;;

# 682 "read.mll"
 
  let _ = (read_json : lexer_state -> Lexing.lexbuf -> Type.json)

  let () =
    read_junk := junk

  let read_int8 v lexbuf =
    let n = read_int v lexbuf in
    if n < 0 || n > 255 then
      lexer_error "Int8 overflow" v lexbuf
    else
      char_of_int n

  let read_list read_cell v lexbuf =
    List.rev (read_list_rev read_cell v lexbuf)

  let array_of_rev_list l =
    match l with
	[] -> [| |]
      | x :: tl ->
	  let len = List.length l in
	  let a = Array.make len x in
	  let r = ref tl in
	  for i = len - 2 downto 0 do
	    a.(i) <- List.hd !r;
	    r := List.tl !r
	  done;
	  a

  let read_array read_cell v lexbuf =
    let l = read_list_rev read_cell v lexbuf in
    array_of_rev_list l

  let finish v lexbuf =
    read_space v lexbuf;
    if not (read_eof lexbuf) then
      long_error "Junk after end of JSON value:" v lexbuf

  let init_lexer = init_lexer

  let from_lexbuf v ?(stream = false) lexbuf =
    read_space v lexbuf;

    let x =
      if read_eof lexbuf then
	raise End_of_input
      else
	read_json v lexbuf
    in

    if not stream then
      finish v lexbuf;

    x


  let from_string ?buf ?fname ?lnum s =
    try
      let lexbuf = Lexing.from_string s in
      let v = init_lexer ?buf ?fname ?lnum () in
      from_lexbuf v lexbuf
    with End_of_input ->
      json_error "Blank input data"

  let from_channel ?buf ?fname ?lnum ic =
    try
      let lexbuf = Lexing.from_channel ic in
      let v = init_lexer ?buf ?fname ?lnum () in
      from_lexbuf v lexbuf
    with End_of_input ->
      json_error "Blank input data"

  let from_file ?buf ?fname ?lnum file =
    let ic = open_in file in
    try
      let x = from_channel ?buf ?fname ?lnum ic in
      close_in ic;
      x
    with e ->
      close_in_noerr ic;
      raise e

  let from_function ?buf ?fname ?lnum f = 
    try
      let lexbuf = Lexing.from_function f in
      let v = init_lexer ?buf ?fname ?lnum () in
      from_lexbuf v lexbuf
    with End_of_input ->
      json_error "Blank input data"

  let stream_from_lexbuf v ?(fin = fun () -> ()) lexbuf =
    let stream = Some true in
    let f i =
      try Some (from_lexbuf v ?stream lexbuf)
      with
	  End_of_input ->
	    fin ();
	    None
	| e ->
	    (try fin () with _ -> ());
	    raise e
    in
    Stream.from f

  let stream_from_string ?buf ?fname ?lnum s =
    let v = init_lexer ?buf ?fname ?lnum () in
    stream_from_lexbuf v (Lexing.from_string s)

  let stream_from_channel ?buf ?fin ?fname ?lnum ic =
    let lexbuf = Lexing.from_channel ic in
    let v = init_lexer ?buf ?fname ?lnum () in
    stream_from_lexbuf v ?fin lexbuf

  let stream_from_file ?buf ?fname ?lnum file =
    let ic = open_in file in
    let fin () = close_in ic in
    let fname =
      match fname with
	  None -> Some file
	| x -> x
    in
    let lexbuf = Lexing.from_channel ic in
    let v = init_lexer ?buf ?fname ?lnum () in
    stream_from_lexbuf v ~fin lexbuf

  type json_line = [ `Json of Type.json | `Exn of exn ]

  let linestream_from_channel
      ?buf ?(fin = fun () -> ()) ?fname ?lnum:(lnum0 = 1) ic =
    let buf =
      match buf with
	  None -> Some (Buffer.create 256)
	| Some _ -> buf
    in
    let f i =
      try 
	let line = input_line ic in
	let lnum = lnum0 + i in
	Some (`Json (from_string ?buf ?fname ~lnum line))
      with
	  End_of_file -> fin (); None
	| e -> Some (`Exn e)
    in
    Stream.from f

  let linestream_from_file ?buf ?fname ?lnum file =
    let ic = open_in file in
    let fin () = close_in ic in
    let fname =
      match fname with
	  None -> Some file
	| x -> x
    in
    linestream_from_channel ?buf ~fin ?fname ?lnum ic

  (*
  let prettify ?std s =
    pretty_to_string (from_string s)
  *)

# 2340 "read.ml"
