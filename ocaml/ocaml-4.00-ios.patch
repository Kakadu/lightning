diff -urN ocaml-4.00/Makefile.ios ocaml-4.00-ios/Makefile.ios
--- ocaml-4.00/Makefile.ios	1970-01-01 03:00:00.000000000 +0300
+++ ocaml-4.00-ios/Makefile.ios	2012-05-05 17:26:16.000000000 +0400
@@ -0,0 +1,354 @@
+include config/Makefile
+include stdlib/StdlibModules
+
+CAMLC=ocamlc.opt
+CAMLOPT=ocamlopt.opt
+COMPFLAGS=-strict-sequence -warn-error A $(INCLUDES)
+LINKFLAGS=
+
+CAMLYACC=ocamlyacc
+YACCFLAGS=-v
+CAMLLEX=ocamllex.opt
+CAMLDEP=ocamldep.opt
+DEPFLAGS=$(INCLUDES)
+CAMLRUN=ocamlrun
+SHELL=/bin/sh
+MKDIR=mkdir -p
+
+INCLUDES=-I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver \
+	 -I toplevel
+
+UTILS=utils/misc.cmo utils/tbl.cmo utils/config.cmo \
+  utils/clflags.cmo utils/terminfo.cmo utils/ccomp.cmo utils/warnings.cmo \
+  utils/consistbl.cmo
+
+OPTUTILS=$(UTILS)
+
+PARSING=parsing/location.cmo parsing/longident.cmo \
+  parsing/syntaxerr.cmo parsing/parser.cmo \
+  parsing/lexer.cmo parsing/parse.cmo parsing/printast.cmo
+
+TYPING=typing/ident.cmo typing/path.cmo \
+  typing/primitive.cmo typing/types.cmo \
+  typing/btype.cmo typing/oprint.cmo \
+  typing/subst.cmo typing/predef.cmo \
+  typing/datarepr.cmo typing/env.cmo \
+  typing/typedtree.cmo typing/ctype.cmo \
+  typing/printtyp.cmo typing/includeclass.cmo \
+  typing/mtype.cmo typing/includecore.cmo \
+  typing/includemod.cmo typing/parmatch.cmo \
+  typing/typetexp.cmo typing/stypes.cmo typing/typecore.cmo \
+  typing/typedecl.cmo typing/typeclass.cmo \
+  typing/typemod.cmo
+
+COMP=bytecomp/lambda.cmo bytecomp/printlambda.cmo \
+  bytecomp/typeopt.cmo bytecomp/switch.cmo bytecomp/matching.cmo \
+  bytecomp/translobj.cmo bytecomp/translcore.cmo \
+  bytecomp/translclass.cmo bytecomp/translmod.cmo \
+  bytecomp/simplif.cmo bytecomp/runtimedef.cmo
+
+BYTECOMP=bytecomp/meta.cmo bytecomp/instruct.cmo bytecomp/bytegen.cmo \
+  bytecomp/printinstr.cmo bytecomp/opcodes.cmo bytecomp/emitcode.cmo \
+  bytecomp/bytesections.cmo bytecomp/dll.cmo bytecomp/symtable.cmo \
+  bytecomp/bytelink.cmo bytecomp/bytelibrarian.cmo bytecomp/bytepackager.cmo
+
+ASMCOMP=asmcomp/arch.cmo asmcomp/debuginfo.cmo \
+  asmcomp/cmm.cmo asmcomp/printcmm.cmo \
+  asmcomp/reg.cmo asmcomp/mach.cmo asmcomp/proc.cmo \
+  asmcomp/clambda.cmo asmcomp/compilenv.cmo \
+  asmcomp/closure.cmo asmcomp/cmmgen.cmo \
+  asmcomp/printmach.cmo asmcomp/selectgen.cmo asmcomp/selection.cmo \
+  asmcomp/comballoc.cmo asmcomp/liveness.cmo \
+  asmcomp/spill.cmo asmcomp/split.cmo \
+  asmcomp/interf.cmo asmcomp/coloring.cmo \
+  asmcomp/reloadgen.cmo asmcomp/reload.cmo \
+  asmcomp/printlinear.cmo asmcomp/linearize.cmo \
+  asmcomp/schedgen.cmo asmcomp/scheduling.cmo \
+  asmcomp/emitaux.cmo asmcomp/emit.cmo asmcomp/asmgen.cmo \
+  asmcomp/asmlink.cmo asmcomp/asmlibrarian.cmo asmcomp/asmpackager.cmo
+
+DRIVER=driver/pparse.cmo driver/errors.cmo driver/compile.cmo \
+  driver/main_args.cmo driver/main.cmo
+
+OPTDRIVER= driver/pparse.cmo driver/opterrors.cmo driver/optcompile.cmo \
+  driver/main_args.cmo driver/optmain.cmo
+
+PERVASIVES=$(STDLIB_MODULES) outcometree topdirs toploop
+
+OPTOBJS=$(OPTUTILS) $(PARSING) $(TYPING) $(COMP) $(ASMCOMP) $(OPTDRIVER)
+
+
+all: runtime runtimeopt ocamlopt.opt libraryopt otherlibrariesopt
+
+runtime:
+	cd byterun; $(MAKE) all
+	if test -f stdlib/libcamlrun.a; then :; else \
+	  ln -s ../byterun/libcamlrun.a stdlib/libcamlrun.a; fi
+
+clean::
+	cd byterun; $(MAKE) clean
+	rm -f stdlib/libcamlrun.a
+	rm -f stdlib/caml
+
+# The runtime system for the native-code compiler
+
+runtimeopt: makeruntimeopt
+	cp asmrun/libasmrun.a stdlib/libasmrun.a
+
+makeruntimeopt:
+	cd asmrun; $(MAKE) all
+
+clean::
+	cd asmrun; $(MAKE) clean
+	rm -f stdlib/libasmrun.a
+
+alldepend::
+	cd asmrun; $(MAKE) depend
+
+ocamlopt.opt: $(OPTOBJS:.cmo=.cmx)
+	$(CAMLOPT) $(LINKFLAGS) -o ocamlopt.opt $(OPTOBJS:.cmo=.cmx)
+	@sed -e 's|@compiler@|ocamlc.opt|' \
+	  driver/ocamlcomp.sh.in > ocamlcomp.sh
+	@chmod +x ocamlcomp.sh
+	@sed -e 's|@compiler@|$$topdir/ocamlopt.opt|' \
+	  driver/ocamlcomp.sh.in > ocamlcompopt.sh
+	@chmod +x ocamlcompopt.sh
+
+partialclean::
+	rm -f ocamlcomp.sh ocamlcompopt.sh ocamlopt.opt
+
+libraryopt:
+	cd stdlib; $(MAKE) allopt
+
+partialclean::
+	cd stdlib; $(MAKE) clean
+
+alldepend::
+	cd stdlib; $(MAKE) depend
+
+ocamlmklib:
+	cd tools; $(MAKE) ocamlmklib
+
+partialclean::
+	cd tools; $(MAKE) clean
+
+
+otherlibrariesopt: ocamlmklib
+	for i in $(OTHERLIBRARIES); do \
+	  (cd otherlibs/$$i; $(MAKE) allopt) || exit $$?; \
+	done
+
+partialclean::
+	for i in $(OTHERLIBRARIES); do \
+	  (cd otherlibs/$$i; $(MAKE) partialclean); \
+	done
+
+
+
+# Installation of the native-code compiler
+install:
+	if test -d $(BINDIR); then : ; else $(MKDIR) $(BINDIR); fi
+	if test -d $(LIBDIR); then : ; else $(MKDIR) $(LIBDIR); fi
+	cp typing/outcometree.cmi typing/outcometree.mli $(LIBDIR)
+	cd byterun; $(MAKE) installopt
+	cd asmrun; $(MAKE) install
+	cd stdlib; $(MAKE) installopt
+	for i in $(OTHERLIBRARIES); \
+	  do (cd otherlibs/$$i; $(MAKE) installopt) || exit $$?; done
+	cp ocamlopt.opt $(BINDIR)/ocamlopt.opt$(EXE)
+	ln -fs $(BINDIR)/ocamlopt.opt $(BINDIR)/ocamlopt
+	cp tools/ocamlmklib $(BINDIR)
+	cp config/Makefile $(LIBDIR)/Makefile.config
+
+clean::
+	for i in $(OTHERLIBRARIES); do (cd otherlibs/$$i; $(MAKE) clean); done
+
+alldepend::
+	for i in $(OTHERLIBRARIES); do (cd otherlibs/$$i; $(MAKE) depend); done
+
+# The configuration file
+
+utils/config.ml: utils/config.mlp config/Makefile
+	@rm -f utils/config.ml
+	sed -e 's|%%LIBDIR%%|$(LIBDIR)|' \
+	    -e 's|%%BYTERUN%%|$(BINDIR)/ocamlrun|' \
+	    -e 's|%%CCOMPTYPE%%|cc|' \
+	    -e 's|%%BYTECC%%|$(BYTECC) $(BYTECCCOMPOPTS) $(SHAREDCCCOMPOPTS)|' \
+	    -e 's|%%NATIVECC%%|$(NATIVECC) $(NATIVECCCOMPOPTS)|' \
+	    -e 's|%%PACKLD%%|$(PACKLD)|' \
+	    -e 's|%%BYTECCLIBS%%|$(BYTECCLIBS)|' \
+	    -e 's|%%NATIVECCLIBS%%|$(NATIVECCLIBS)|' \
+	    -e 's|%%RANLIBCMD%%|$(RANLIBCMD)|' \
+	    -e 's|%%ARCMD%%|$(ARCMD)|' \
+	    -e 's|%%CC_PROFILE%%|$(CC_PROFILE)|' \
+	    -e 's|%%ARCH%%|$(ARCH)|' \
+	    -e 's|%%MODEL%%|$(MODEL)|' \
+	    -e 's|%%SYSTEM%%|$(SYSTEM)|' \
+	    -e 's|%%EXT_OBJ%%|.o|' \
+	    -e 's|%%EXT_ASM%%|.s|' \
+	    -e 's|%%EXT_LIB%%|.a|' \
+	    -e 's|%%EXT_DLL%%|.so|' \
+	    -e 's|%%SYSTHREAD_SUPPORT%%|$(SYSTHREAD_SUPPORT)|' \
+	    -e 's|%%ASM%%|$(ASM)|' \
+	    -e 's|%%MKDLL%%|$(MKDLL)|' \
+	    -e 's|%%MKEXE%%|$(MKEXE)|' \
+	    -e 's|%%MKMAINDLL%%|$(MKMAINDLL)|' \
+	    -e 's|%%ASM_CFI_SUPPORTED%%|$(ASM_CFI_SUPPORTED)|' \
+	    utils/config.mlp > utils/config.ml
+	@chmod -w utils/config.ml
+
+partialclean::
+	rm -f utils/config.ml
+
+beforedepend:: utils/config.ml
+
+partialclean::
+	rm -f myocamlbuild_config.ml tools/myocamlbuild_config.ml
+
+# The parser
+
+parsing/parser.mli parsing/parser.ml: parsing/parser.mly
+	$(CAMLYACC) $(YACCFLAGS) parsing/parser.mly
+
+partialclean::
+	rm -f parsing/parser.mli parsing/parser.ml parsing/parser.output
+
+beforedepend:: parsing/parser.mli parsing/parser.ml
+
+# The lexer
+
+parsing/lexer.ml: parsing/lexer.mll
+	$(CAMLLEX) parsing/lexer.mll
+
+partialclean::
+	rm -f parsing/lexer.ml
+
+beforedepend:: parsing/lexer.ml
+
+# The auxiliary lexer for counting line numbers
+
+parsing/linenum.ml: parsing/linenum.mll
+	$(CAMLLEX) parsing/linenum.mll
+
+partialclean::
+	rm -f parsing/linenum.ml
+
+beforedepend:: parsing/linenum.ml
+
+# The predefined exceptions and primitives
+
+bytecomp/runtimedef.ml: byterun/primitives byterun/fail.h
+	(echo 'let builtin_exceptions = [|'; \
+	 sed -n -e 's|.*/\* \("[A-Za-z_]*"\) \*/$$|  \1;|p' byterun/fail.h | \
+	 sed -e '$$s/;$$//'; \
+	 echo '|]'; \
+	 echo 'let builtin_primitives = [|'; \
+	 sed -e 's/.*/  "&";/' -e '$$s/;$$//' byterun/primitives; \
+	 echo '|]') > bytecomp/runtimedef.ml
+
+partialclean::
+	rm -f bytecomp/runtimedef.ml
+
+beforedepend:: bytecomp/runtimedef.ml
+
+# Choose the right machine-dependent files
+
+# Choose the right machine-dependent files
+
+asmcomp/arch.ml: asmcomp/$(ARCH)/arch.ml
+	ln -s $(ARCH)/arch.ml asmcomp/arch.ml
+
+partialclean::
+	rm -f asmcomp/arch.ml
+
+beforedepend:: asmcomp/arch.ml
+
+asmcomp/proc.ml: asmcomp/$(ARCH)/proc.ml
+	ln -s $(ARCH)/proc.ml asmcomp/proc.ml
+
+partialclean::
+	rm -f asmcomp/proc.ml
+
+beforedepend:: asmcomp/proc.ml
+
+asmcomp/selection.ml: asmcomp/$(ARCH)/selection.ml
+	ln -s $(ARCH)/selection.ml asmcomp/selection.ml
+
+partialclean::
+	rm -f asmcomp/selection.ml
+
+beforedepend:: asmcomp/selection.ml
+
+asmcomp/reload.ml: asmcomp/$(ARCH)/reload.ml
+	ln -s $(ARCH)/reload.ml asmcomp/reload.ml
+
+partialclean::
+	rm -f asmcomp/reload.ml
+
+beforedepend:: asmcomp/reload.ml
+
+asmcomp/scheduling.ml: asmcomp/$(ARCH)/scheduling.ml
+	ln -s $(ARCH)/scheduling.ml asmcomp/scheduling.ml
+
+partialclean::
+	rm -f asmcomp/scheduling.ml
+
+beforedepend:: asmcomp/scheduling.ml
+
+# Preprocess the code emitters
+
+asmcomp/emit.ml: asmcomp/$(ARCH)/emit.mlp tools/cvt_emit
+	$(CAMLRUN) tools/cvt_emit < asmcomp/$(ARCH)/emit.mlp > asmcomp/emit.ml \
+	|| { rm -f asmcomp/emit.ml; exit 2; }
+
+partialclean::
+	rm -f asmcomp/emit.ml
+
+beforedepend:: asmcomp/emit.ml
+
+tools/cvt_emit: tools/cvt_emit.mll
+	cd tools; \
+	$(MAKE) CAMLC="ocamlc" cvt_emit
+
+# Default rules
+
+.SUFFIXES: .ml .mli .cmo .cmi .cmx
+
+.ml.cmo:
+	$(CAMLC) $(COMPFLAGS) -c $<
+
+.mli.cmi:
+	$(CAMLC) $(COMPFLAGS) -c $<
+
+.ml.cmx:
+	$(CAMLOPT) $(COMPFLAGS) -c $<
+
+partialclean::
+	for d in utils parsing typing bytecomp asmcomp driver toplevel tools; \
+	  do rm -f $$d/*.cm[iox] $$d/*.annot $$d/*.[so] $$d/*~; done
+	rm -f *~
+
+depend: beforedepend
+	(for d in utils parsing typing bytecomp asmcomp driver toplevel; \
+	 do $(CAMLDEP) $(DEPFLAGS) $$d/*.mli $$d/*.ml; \
+	 done) > .depend
+
+alldepend:: depend
+
+clean:: partialclean
+
+distclean:
+	./build/distclean.sh
+
+.PHONY: all backup bootstrap camlp4opt camlp4out checkstack clean
+.PHONY: partialclean beforedepend alldepend cleanboot coldstart
+.PHONY: compare core coreall
+.PHONY: coreboot defaultentry depend distclean install installopt
+.PHONY: library library-cross libraryopt ocamlbuild-mixed-boot
+.PHONY: ocamlbuild.byte ocamlbuild.native ocamldebugger ocamldoc
+.PHONY: ocamldoc.opt ocamllex ocamllex.opt ocamltools ocamltools.opt
+.PHONY: ocamlyacc opt-core opt opt.opt otherlibraries
+.PHONY: otherlibrariesopt package-macosx promote promote-cross
+.PHONY: restore runtime runtimeopt makeruntimeopt world world.opt
+
+include .depend
diff -urN ocaml-4.00/asmcomp/arm/emit.mlp ocaml-4.00-ios/asmcomp/arm/emit.mlp
--- ocaml-4.00/asmcomp/arm/emit.mlp	2012-04-26 23:17:53.000000000 +0400
+++ ocaml-4.00-ios/asmcomp/arm/emit.mlp	2012-05-05 17:26:16.000000000 +0400
@@ -32,25 +32,26 @@
 (* Output a label *)
 
 let emit_label lbl =
-  emit_string ".L"; emit_int lbl
+  emit_string "L"; emit_int lbl
 
 let emit_data_label lbl =
-  emit_string ".Ld"; emit_int lbl
+  emit_string "Ld"; emit_int lbl
 
 (* Symbols *)
 
 let emit_symbol s =
-  Emitaux.emit_symbol '$' s
+  emit_string "_"; Emitaux.emit_symbol '$' s
 
 let emit_call s =
+(*
   if !Clflags.dlcode || !pic_code
   then `bl	{emit_symbol s}(PLT)`
-  else `bl	{emit_symbol s}`
+  else *) `bl	{emit_symbol s}`
 
 let emit_jump s =
-  if !Clflags.dlcode || !pic_code
+  (* if !Clflags.dlcode || !pic_code
   then `b	{emit_symbol s}(PLT)`
-  else `b	{emit_symbol s}`
+  else *) `b	{emit_symbol s}`
 
 (* Output a pseudo-register *)
 
@@ -823,13 +824,14 @@
   call_gc_sites := [];
   bound_error_sites := [];
   `	.text\n`;
-  `	.align	2\n`;
   `	.globl	{emit_symbol fundecl.fun_name}\n`;
+  `	.align	2\n`;
   if !arch > ARMv6 && !thumb then
     `	.thumb\n`
   else
     `	.arm\n`;
-  `	.type	{emit_symbol fundecl.fun_name}, %function\n`;
+  (*`	.type	{emit_symbol fundecl.fun_name}, %function\n`;*)
+  `	.thumb_func	{emit_symbol fundecl.fun_name}\n`;
   `{emit_symbol fundecl.fun_name}:\n`;
   if !Clflags.gprofile then emit_profile();
   let n = frame_size() in
@@ -840,9 +842,11 @@
   emit_all 0 fundecl.fun_body;
   emit_literals();
   List.iter emit_call_gc !call_gc_sites;
-  List.iter emit_call_bound_error !bound_error_sites;
+  List.iter emit_call_bound_error !bound_error_sites
+	(*
   `	.type	{emit_symbol fundecl.fun_name}, %function\n`;
   `	.size	{emit_symbol fundecl.fun_name}, .-{emit_symbol fundecl.fun_name}\n`
+	*)
 
 (* Emission of data *)
 
@@ -870,6 +874,7 @@
 
 let begin_assembly() =
   `	.syntax	unified\n`;
+	(*
   begin match !arch with
   | ARMv4   -> `	.arch	armv4t\n`
   | ARMv5   -> `	.arch	armv5t\n`
@@ -883,6 +888,7 @@
   | VFPv3_D16 -> `	.fpu	vfpv3-d16\n`
   | VFPv3     -> `	.fpu	vfpv3\n`
   end;
+	*)
   `trap_ptr	.req	r8\n`;
   `alloc_ptr	.req	r10\n`;
   `alloc_limit	.req	r11\n`;
@@ -893,13 +899,15 @@
   let lbl_begin = Compilenv.make_symbol (Some "code_begin") in
   `	.text\n`;
   `	.globl	{emit_symbol lbl_begin}\n`;
-  `{emit_symbol lbl_begin}:\n`
+  `{emit_symbol lbl_begin}:\n`;
+	` nop\n`
 
 let end_assembly () =
   let lbl_end = Compilenv.make_symbol (Some "code_end") in
   `	.text\n`;
   `	.globl	{emit_symbol lbl_end}\n`;
   `{emit_symbol lbl_end}:\n`;
+	` nop\n`;
   let lbl_end = Compilenv.make_symbol (Some "data_end") in
   `	.data\n`;
   `	.globl	{emit_symbol lbl_end}\n`;
@@ -910,7 +918,7 @@
   `{emit_symbol lbl}:\n`;
   emit_frames
     { efa_label = (fun lbl ->
-                       `	.type	{emit_label lbl}, %function\n`;
+                       (*`	.type	{emit_label lbl}, %function\n`;*)
                        `	.word	{emit_label lbl}\n`);
       efa_16 = (fun n -> `	.short	{emit_int n}\n`);
       efa_32 = (fun n -> `	.long	{emit_int32 n}\n`);
@@ -920,11 +928,13 @@
                            `	.word	{emit_label lbl} - . + {emit_int32 ofs}\n`);
       efa_def_label = (fun lbl -> `{emit_label lbl}:\n`);
       efa_string = (fun s -> emit_string_directive "	.asciz	" s) };
-  `	.type	{emit_symbol lbl}, %object\n`;
-  `	.size	{emit_symbol lbl}, .-{emit_symbol lbl}\n`;
+  (*`	.type	{emit_symbol lbl}, %object\n`;
+  `	.size	{emit_symbol lbl}, .-{emit_symbol lbl}\n`;*)
+	(*
   begin match Config.system with
     "linux_eabihf" | "linux_eabi" ->
       (* Mark stack as non-executable *)
       `	.section	.note.GNU-stack,\"\",%progbits\n`
   | _ -> ()
   end
+	*)
diff -urN ocaml-4.00/asmrun/arm.S ocaml-4.00-ios/asmrun/arm.S
--- ocaml-4.00/asmrun/arm.S	2012-04-26 23:18:00.000000000 +0400
+++ ocaml-4.00-ios/asmrun/arm.S	2012-05-05 17:26:16.000000000 +0400
@@ -17,11 +17,27 @@
 /* Asm part of the runtime system, ARM processor */
 /* Must be preprocessed by cpp */
 
+#if defined(SYS_solaris)
+#define CONCAT(a,b) a/**/b
+#else
+#define CONCAT(a,b) a##b
+#endif
+
+#if defined(SYS_linux_elf) || defined(SYS_bsd_elf) \
+ || defined(SYS_solaris) || defined(SYS_beos) || defined(SYS_gnu)
+#define G(x) x
+#define LBL(x) CONCAT(.L,x)
+#else
+#define G(x) CONCAT(_,x)
+#define LBL(x) CONCAT(L,x)
+#endif
+
         .syntax unified
         .text
 #if defined(SYS_linux_eabihf)
-        .arch   armv7-a
+/*        .arch   armv7-a
         .fpu    vfpv3-d16
+*/        
         .thumb
 #elif defined(SYS_linux_eabi)
         .arch   armv4t
@@ -46,204 +62,176 @@
 alloc_ptr       .req    r10
 alloc_limit     .req    r11
 
-/* Support for profiling with gprof */
-
-#if defined(PROFILING) && (defined(SYS_linux_eabihf) || defined(SYS_linux_eabi))
-#define PROFILE \
-        push    {lr}; \
-        bl      __gnu_mcount_nc
-#else
-#define PROFILE
-#endif
-
 /* Allocation functions and GC interface */
 
-        .globl  caml_system__code_begin
-caml_system__code_begin:
+        .globl  G(caml_system__code_begin)
+G(caml_system__code_begin):
+				nop
         
         .align  2
-        .globl  caml_call_gc
-        .type caml_call_gc, %function
-caml_call_gc:
-        PROFILE
+        .globl  G(caml_call_gc)
+				.thumb_func G(caml_call_gc)
+G(caml_call_gc):
     /* Record return address */
-        ldr     r12, =caml_last_return_address
+        ldr     r12, LBL(caml_last_return_address)
         str     lr, [r12]
-.Lcaml_call_gc:
+LBL(caml_call_gc):
     /* Record lowest stack address */
-        ldr     r12, =caml_bottom_of_stack
+        ldr     r12, LBL(caml_bottom_of_stack)
         str     sp, [r12]
     /* Save caller floating-point registers on the stack */
         vpush   {d0-d7}
     /* Save integer registers and return address on the stack */
         push    {r0-r7,r12,lr}
     /* Store pointer to saved integer registers in caml_gc_regs */
-        ldr     r12, =caml_gc_regs
+        ldr     r12, LBL(caml_gc_regs)
         str     sp, [r12]
     /* Save current allocation pointer for debugging purposes */
-        ldr     alloc_limit, =caml_young_ptr
+        ldr     alloc_limit, LBL(caml_young_ptr)
         str     alloc_ptr, [alloc_limit]
     /* Save trap pointer in case an exception is raised during GC */
-        ldr     r12, =caml_exception_pointer
+        ldr     r12, LBL(caml_exception_pointer)
         str     trap_ptr, [r12]
     /* Call the garbage collector */
-        bl      caml_garbage_collection
+        bl      G(caml_garbage_collection)
     /* Restore integer registers and return address from the stack */
         pop     {r0-r7,r12,lr}
     /* Restore floating-point registers from the stack */
         vpop    {d0-d7}
     /* Reload new allocation pointer and limit */
     /* alloc_limit still points to caml_young_ptr */
-        ldr     r12, =caml_young_limit
+        ldr     r12, LBL(caml_young_limit)
         ldr     alloc_ptr, [alloc_limit]
         ldr     alloc_limit, [r12]
     /* Return to caller */
         bx      lr
-        .type   caml_call_gc, %function
-        .size   caml_call_gc, .-caml_call_gc
 
         .align  2
-        .globl  caml_alloc1
-        .type caml_alloc1, %function
-caml_alloc1:
-        PROFILE
-.Lcaml_alloc1:
+        .globl  G(caml_alloc1)
+				.thumb_func G(caml_alloc1)
+G(caml_alloc1):
+LBL(caml_alloc1):
         sub     alloc_ptr, alloc_ptr, 8
         cmp     alloc_ptr, alloc_limit
         bcc     1f
         bx      lr
 1:  /* Record return address */
-        ldr     r7, =caml_last_return_address
+        ldr     r7, LBL(caml_last_return_address)
         str     lr, [r7]
     /* Call GC (preserves r7) */
-        bl      .Lcaml_call_gc
+        bl      LBL(caml_call_gc)
     /* Restore return address */
         ldr     lr, [r7]
     /* Try again */
-        b       .Lcaml_alloc1
-        .type   caml_alloc1, %function
-        .size   caml_alloc1, .-caml_alloc1
+        b       LBL(caml_alloc1)
 
         .align  2
-        .globl  caml_alloc2
-        .type caml_alloc2, %function
-caml_alloc2:
-        PROFILE
-.Lcaml_alloc2:
+        .globl  G(caml_alloc2)
+				.thumb_func G(caml_alloc2)
+G(caml_alloc2):
+LBL(caml_alloc2):
         sub     alloc_ptr, alloc_ptr, 12
         cmp     alloc_ptr, alloc_limit
         bcc     1f
         bx      lr
 1:  /* Record return address */
-        ldr     r7, =caml_last_return_address
+        ldr     r7, LBL(caml_last_return_address)
         str     lr, [r7]
     /* Call GC (preserves r7) */
-        bl      .Lcaml_call_gc
+        bl      LBL(caml_call_gc)
     /* Restore return address */
         ldr     lr, [r7]
     /* Try again */
-        b       .Lcaml_alloc2
-        .type   caml_alloc2, %function
-        .size   caml_alloc2, .-caml_alloc2
+        b       LBL(caml_alloc2)
 
         .align  2
-        .globl  caml_alloc3
-        .type caml_alloc3, %function
-caml_alloc3:
-        PROFILE
-.Lcaml_alloc3:
+        .globl  G(caml_alloc3)
+        .thumb_func  G(caml_alloc3)
+G(caml_alloc3):
+LBL(caml_alloc3):
         sub     alloc_ptr, alloc_ptr, 16
         cmp     alloc_ptr, alloc_limit
         bcc     1f
         bx      lr
 1:  /* Record return address */
-        ldr     r7, =caml_last_return_address
+        ldr     r7, LBL(caml_last_return_address)
         str     lr, [r7]
     /* Call GC (preserves r7) */
-        bl      .Lcaml_call_gc
+        bl      LBL(caml_call_gc)
     /* Restore return address */
         ldr     lr, [r7]
     /* Try again */
-        b       .Lcaml_alloc3
-        .type   caml_alloc3, %function
-        .size   caml_alloc3, .-caml_alloc3
+        b       LBL(caml_alloc3)
 
         .align  2
-        .globl  caml_allocN
-        .type caml_allocN, %function
-caml_allocN:
-        PROFILE
-.Lcaml_allocN:
+        .globl  G(caml_allocN)
+        .thumb_func  G(caml_allocN)
+G(caml_allocN):
+LBL(caml_allocN):
         sub     alloc_ptr, alloc_ptr, r7
         cmp     alloc_ptr, alloc_limit
         bcc     1f
         bx      lr
 1:  /* Record return address */
-        ldr     r12, =caml_last_return_address
+        ldr     r12, LBL(caml_last_return_address)
         str     lr, [r12]
     /* Call GC (preserves r7) */
-        bl      .Lcaml_call_gc
+        bl      LBL(caml_call_gc)
     /* Restore return address */
-        ldr     r12, =caml_last_return_address
+        ldr     r12, LBL(caml_last_return_address)
         ldr     lr, [r12]
     /* Try again */
-        b       .Lcaml_allocN
-        .type   caml_allocN, %function
-        .size   caml_allocN, .-caml_allocN
+        b       LBL(caml_allocN)
 
 /* Call a C function from OCaml */
 /* Function to call is in r7 */
 
         .align  2
-        .globl  caml_c_call
-        .type caml_c_call, %function
-caml_c_call:
-        PROFILE
+        .globl  G(caml_c_call)
+        .thumb_func  G(caml_c_call)
+G(caml_c_call):
     /* Record lowest stack address and return address */
-        ldr     r5, =caml_last_return_address
-        ldr     r6, =caml_bottom_of_stack
+        ldr     r5, LBL(caml_last_return_address)
+        ldr     r6, LBL(caml_bottom_of_stack)
         str     lr, [r5]
         str     sp, [r6]
     /* Preserve return address in callee-save register r4 */
         mov     r4, lr
     /* Make the exception handler alloc ptr available to the C code */
-        ldr     r5, =caml_young_ptr
-        ldr     r6, =caml_exception_pointer
+        ldr     r5, LBL(caml_young_ptr)
+        ldr     r6, LBL(caml_exception_pointer)
         str     alloc_ptr, [r5]
         str     trap_ptr, [r6]
     /* Call the function */
         blx     r7
     /* Reload alloc ptr and alloc limit */
-        ldr     r6, =caml_young_limit
+        ldr     r6, LBL(caml_young_limit)
         ldr     alloc_ptr, [r5]         /* r5 still points to caml_young_ptr */
         ldr     alloc_limit, [r6]
     /* Return */
         bx      r4
-        .type   caml_c_call, %function
-        .size   caml_c_call, .-caml_c_call
 
 /* Start the OCaml program */
 
         .align  2
-        .globl  caml_start_program
-        .type caml_start_program, %function
-caml_start_program:
-        PROFILE
-        ldr     r12, =caml_program
+        .globl  G(caml_start_program)
+        .thumb_func  G(caml_start_program)
+G(caml_start_program):
+        ldr     r12, LBL(caml_program)
 
 /* Code shared with caml_callback* */
 /* Address of OCaml code to call is in r12 */
 /* Arguments to the OCaml code are in r0...r3 */
 
-.Ljump_to_caml:
+LBL(jump_to_caml):
     /* Save return address and callee-save registers */
         vpush   {d8-d15}
         push    {r4-r8,r10,r11,lr}              /* 8-byte alignment */
     /* Setup a callback link on the stack */
         sub     sp, sp, 4*4                     /* 8-byte alignment */
-        ldr     r4, =caml_bottom_of_stack
-        ldr     r5, =caml_last_return_address
-        ldr     r6, =caml_gc_regs
+        ldr     r4, LBL(caml_bottom_of_stack)
+        ldr     r5, LBL(caml_last_return_address)
+        ldr     r6, LBL(caml_gc_regs)
         ldr     r4, [r4]
         ldr     r5, [r5]
         ldr     r6, [r6]
@@ -252,71 +240,65 @@
         str     r6, [sp, 8]
     /* Setup a trap frame to catch exceptions escaping the OCaml code */
         sub     sp, sp, 2*4
-        ldr     r6, =caml_exception_pointer
-        ldr     r5, =.Ltrap_handler
+        ldr     r6, LBL(caml_exception_pointer)
+        ldr     r5, LBL(Ltrap_handler)
         ldr     r4, [r6]
         str     r4, [sp, 0]
         str     r5, [sp, 4]
         mov     trap_ptr, sp
     /* Reload allocation pointers */
-        ldr     r4, =caml_young_ptr
+        ldr     r4, LBL(caml_young_ptr)
         ldr     alloc_ptr, [r4]
-        ldr     r4, =caml_young_limit
+        ldr     r4, LBL(caml_young_limit)
         ldr     alloc_limit, [r4]
     /* Call the OCaml code */
         blx     r12
-.Lcaml_retaddr:
+LBL(caml_retaddr):
     /* Pop the trap frame, restoring caml_exception_pointer */
-        ldr     r4, =caml_exception_pointer
+        ldr     r4, LBL(caml_exception_pointer)
         ldr     r5, [sp, 0]
         str     r5, [r4]
         add     sp, sp, 2*4
     /* Pop the callback link, restoring the global variables */
-.Lreturn_result:
-        ldr     r4, =caml_bottom_of_stack
+LBL(return_result):
+        ldr     r4, LBL(caml_bottom_of_stack)
         ldr     r5, [sp, 0]
         str     r5, [r4]
-        ldr     r4, =caml_last_return_address
+        ldr     r4, LBL(caml_last_return_address)
         ldr     r5, [sp, 4]
         str     r5, [r4]
-        ldr     r4, =caml_gc_regs
+        ldr     r4, LBL(caml_gc_regs)
         ldr     r5, [sp, 8]
         str     r5, [r4]
         add     sp, sp, 4*4
     /* Update allocation pointer */
-        ldr     r4, =caml_young_ptr
+        ldr     r4, LBL(caml_young_ptr)
         str     alloc_ptr, [r4]
     /* Reload callee-save registers and return */
         pop     {r4-r8,r10,r11,lr}
         vpop    {d8-d15}
         bx      lr
-        .type   .Lcaml_retaddr, %function
-        .size   .Lcaml_retaddr, .-.Lcaml_retaddr
-        .type   caml_start_program, %function
-        .size   caml_start_program, .-caml_start_program
 
 /* The trap handler */
 
         .align  2
-.Ltrap_handler:
+LBL(trap_handler):
     /* Save exception pointer */
-        ldr     r12, =caml_exception_pointer
+        ldr     r12, LBL(caml_exception_pointer)
         str     trap_ptr, [r12]
     /* Encode exception bucket as an exception result */
         orr     r0, r0, 2
     /* Return it */
-        b       .Lreturn_result
-        .type   .Ltrap_handler, %function
-        .size   .Ltrap_handler, .-.Ltrap_handler
+        b       LBL(return_result)
 
 /* Raise an exception from OCaml */
 
         .align  2
-        .globl  caml_raise_exn
-caml_raise_exn:
-        PROFILE
+        .globl  G(caml_raise_exn)
+        .thumb_func  G(caml_raise_exn)
+G(caml_raise_exn):
     /* Test if backtrace is active */
-        ldr     r1, =caml_backtrace_active
+        ldr     r1, LBL(caml_backtrace_active)
         ldr     r1, [r1]
         cbz     r1, 1f
     /* Preserve exception bucket in callee-save register r4 */
@@ -325,87 +307,75 @@
         mov     r1, lr                          /* arg2: pc of raise */
         mov     r2, sp                          /* arg3: sp of raise */
         mov     r3, trap_ptr                    /* arg4: sp of handler */
-        bl      caml_stash_backtrace
+        bl      G(caml_stash_backtrace)
     /* Restore exception bucket */
         mov     r0, r4
 1:  /* Cut stack at current trap handler */
         mov     sp, trap_ptr
     /* Pop previous handler and addr of trap, and jump to it */
         pop     {trap_ptr, pc}
-        .type   caml_raise_exn, %function
-        .size   caml_raise_exn, .-caml_raise_exn
 
 /* Raise an exception from C */
 
         .align  2
-        .globl  caml_raise_exception
-        .type caml_raise_exception, %function
-caml_raise_exception:
-        PROFILE
+        .globl  G(caml_raise_exception)
+        .thumb_func  G(caml_raise_exception)
+G(caml_raise_exception):
     /* Reload trap ptr, alloc ptr and alloc limit */
-        ldr     trap_ptr, =caml_exception_pointer
-        ldr     alloc_ptr, =caml_young_ptr
-        ldr     alloc_limit, =caml_young_limit
+        ldr     trap_ptr, LBL(caml_exception_pointer)
+        ldr     alloc_ptr, LBL(caml_young_ptr)
+        ldr     alloc_limit, LBL(caml_young_limit)
         ldr     trap_ptr, [trap_ptr]
         ldr     alloc_ptr, [alloc_ptr]
         ldr     alloc_limit, [alloc_limit]
     /* Test if backtrace is active */
-        ldr     r1, =caml_backtrace_active
+        ldr     r1, LBL(caml_backtrace_active)
         ldr     r1, [r1]
         cbz     r1, 1f
     /* Preserve exception bucket in callee-save register r4 */
         mov     r4, r0
-        ldr     r1, =caml_last_return_address   /* arg2: pc of raise */
+        ldr     r1, LBL(caml_last_return_address)   /* arg2: pc of raise */
         ldr     r1, [r1]
-        ldr     r2, =caml_bottom_of_stack       /* arg3: sp of raise */
+        ldr     r2, LBL(caml_bottom_of_stack)       /* arg3: sp of raise */
         ldr     r2, [r2]
         mov     r3, trap_ptr                    /* arg4: sp of handler */
-        bl      caml_stash_backtrace
+        bl      G(caml_stash_backtrace)
     /* Restore exception bucket */
         mov     r0, r4
 1:  /* Cut stack at current trap handler */
         mov     sp, trap_ptr
     /* Pop previous handler and addr of trap, and jump to it */
         pop     {trap_ptr, pc}
-        .type   caml_raise_exception, %function
-        .size   caml_raise_exception, .-caml_raise_exception
 
 /* Callback from C to OCaml */
 
         .align  2
-        .globl  caml_callback_exn
-        .type caml_callback_exn, %function
-caml_callback_exn:
-        PROFILE
+        .globl  G(caml_callback_exn)
+        .thumb_func  G(caml_callback_exn)
+G(caml_callback_exn):
     /* Initial shuffling of arguments (r0 = closure, r1 = first arg) */
         mov     r12, r0
         mov     r0, r1          /* r0 = first arg */
         mov     r1, r12         /* r1 = closure environment */
         ldr     r12, [r12]      /* code pointer */
-        b       .Ljump_to_caml
-        .type   caml_callback_exn, %function
-        .size   caml_callback_exn, .-caml_callback_exn
+        b       LBL(jump_to_caml)
 
         .align  2
-        .globl  caml_callback2_exn
-        .type caml_callback2_exn, %function
-caml_callback2_exn:
-        PROFILE
+        .globl  G(caml_callback2_exn)
+        .thumb_func  G(caml_callback2_exn)
+G(caml_callback2_exn):
     /* Initial shuffling of arguments (r0 = closure, r1 = arg1, r2 = arg2) */
         mov     r12, r0
         mov     r0, r1          /* r0 = first arg */
         mov     r1, r2          /* r1 = second arg */
         mov     r2, r12         /* r2 = closure environment */
-        ldr     r12, =caml_apply2
-        b       .Ljump_to_caml
-        .type   caml_callback2_exn, %function
-        .size   caml_callback2_exn, .-caml_callback2_exn
+        ldr     r12, LBL(caml_apply2)
+        b       LBL(jump_to_caml)
 
         .align  2
-        .globl  caml_callback3_exn
-        .type caml_callback3_exn, %function
-caml_callback3_exn:
-        PROFILE
+        .globl  G(caml_callback3_exn)
+        .thumb_func  G(caml_callback3_exn)
+G(caml_callback3_exn):
     /* Initial shuffling of arguments */
     /* (r0 = closure, r1 = arg1, r2 = arg2, r3 = arg3) */
         mov     r12, r0
@@ -413,36 +383,70 @@
         mov     r1, r2          /* r1 = second arg */
         mov     r2, r3          /* r2 = third arg */
         mov     r3, r12         /* r3 = closure environment */
-        ldr     r12, =caml_apply3
-        b       .Ljump_to_caml
-        .type   caml_callback3_exn, %function
-        .size   caml_callback3_exn, .-caml_callback3_exn
+        ldr     r12, LBL(caml_apply3)
+        b       LBL(jump_to_caml)
 
         .align  2
-        .globl  caml_ml_array_bound_error
-        .type caml_ml_array_bound_error, %function
-caml_ml_array_bound_error:
-        PROFILE
+        .globl  G(caml_ml_array_bound_error)
+				.thumb_func G(caml_ml_array_bound_error)
+G(caml_ml_array_bound_error):
     /* Load address of [caml_array_bound_error] in r7 */
-        ldr     r7, =caml_array_bound_error
+        ldr     r7, LBL(caml_array_bound_error)
     /* Call that function */
-        b       caml_c_call
-        .type   caml_ml_array_bound_error, %function
-        .size   caml_ml_array_bound_error, .-caml_ml_array_bound_error
+        b       G(caml_c_call)
 
-        .globl  caml_system__code_end
-caml_system__code_end:
+        .globl  G(caml_system__code_end)
+G(caml_system__code_end):
 
+
+/*
+			.section  __DATA,__nl_symbol_ptr,non_lazy_symbol_pointers
+			.align 2
+	LBL(caml_last_return_address):
+			.indirect_symbol G(caml_last_return_address)
+			.long 0
+ 	LBL(caml_backtrace_active):        
+			.indirect_symbol G(caml_backtrace_active)
+			.long 0
+ 	LBL(caml_bottom_of_stack):         
+			.inderect_symbol G(caml_bottom_of_stack)
+			.long 0
+	LBL(caml_gc_regs):                 
+		.inderect_symbol G(caml_gc_regs)
+		.long 0
+	LBL(caml_young_ptr):               
+		.inderect_symbol G(caml_young_ptr)
+		.long 0
+	LBL(caml_young_limit):             
+		.inderect_symbol G(caml_young_limit)
+		.long 0
+	LBL(caml_exception_pointer):       
+		.inderect_symbol G(caml_exception_pointer) 
+		.long 0
+*/
+
+	LBL(caml_last_return_address): .word G(caml_last_return_address)
+ 	LBL(caml_backtrace_active):	.word G(caml_backtrace_active)
+ 	LBL(caml_bottom_of_stack): .word G(caml_bottom_of_stack)
+	LBL(caml_gc_regs): .word G(caml_gc_regs)
+	LBL(caml_young_ptr): .word G(caml_young_ptr)
+	LBL(caml_young_limit): .word G(caml_young_limit)
+	LBL(caml_exception_pointer): .word G(caml_exception_pointer)
+  LBL(caml_program):								.word G(caml_program)
+	LBL(Ltrap_handler):               .word LBL(trap_handler) 
+	LBL(caml_apply2):                 .word G(caml_apply2)
+	LBL(caml_apply3):                 .word G(caml_apply3)
+	LBL(caml_array_bound_error):      .word G(caml_array_bound_error)                
+        
 /* GC roots for callback */
 
         .data
         .align  2
-        .globl  caml_system__frametable
-caml_system__frametable:
+        .globl  G(caml_system__frametable)
+G(caml_system__frametable):
         .word   1               /* one descriptor */
-        .word   .Lcaml_retaddr  /* return address into callback */
+        .word   LBL(caml_retaddr)  /* return address into callback */
         .short  -1              /* negative frame size => use callback link */
         .short  0               /* no roots */
         .align  2
-        .type   caml_system__frametable, %object
-        .size   caml_system__frametable, .-caml_system__frametable
+
diff -urN ocaml-4.00/asmrun/backtrace.c ocaml-4.00-ios/asmrun/backtrace.c
--- ocaml-4.00/asmrun/backtrace.c	2012-04-26 23:18:00.000000000 +0400
+++ ocaml-4.00-ios/asmrun/backtrace.c	2012-05-09 00:51:20.000000000 +0400
@@ -162,12 +162,12 @@
   li->loc_endchr = ((info2 & 0xF) << 6) | (info1 >> 26);
 }
 
-static void print_location(struct loc_info * li, int index)
+static char* print_location(struct loc_info * li, int index)
 {
   char * info;
 
   /* Ignore compiler-inserted raise */
-  if (!li->loc_valid) return;
+  if (!li->loc_valid) return NULL;
 
   if (index == 0)
     info = "Raised at";
@@ -175,9 +175,12 @@
     info = "Re-raised at";
   else
     info = "Called from";
-  fprintf (stderr, "%s file \"%s\", line %d, characters %d-%d\n",
+	char *res;
+	asprintf(&res,"%s file \"%s\", line %d, characters %d-%d\n",
            info, li->loc_filename, li->loc_lnum,
            li->loc_startchr, li->loc_endchr);
+  fputs (res,stderr);
+	return res;
 }
 
 /* Print a backtrace */
@@ -187,12 +190,30 @@
   int i;
   struct loc_info li;
 
+	char *msg;
   for (i = 0; i < caml_backtrace_pos; i++) {
     extract_location_info((frame_descr *) (caml_backtrace_buffer[i]), &li);
-    print_location(&li, i);
+		msg = print_location(&li, i);
+		if (msg) free(msg);
   }
 }
 
+char **caml_print_get_exception_backtrace(void)
+{
+	int i;
+  struct loc_info li;
+	char **res = NULL;
+
+	if (caml_backtrace_pos > 0) {
+		res = malloc(caml_backtrace_pos * sizeof(char*));
+		for (i = 0; i < caml_backtrace_pos; i++) {
+			extract_location_info((frame_descr *) (caml_backtrace_buffer[i]), &li);
+			res[i] = print_location(&li, i);
+		}
+	};
+	return res;
+}
+
 /* Convert the backtrace to a data structure usable from OCaml */
 
 CAMLprim value caml_get_exception_backtrace(value unit)
diff -urN ocaml-4.00/byterun/Makefile.common ocaml-4.00-ios/byterun/Makefile.common
--- ocaml-4.00/byterun/Makefile.common	2012-04-26 23:17:55.000000000 +0400
+++ ocaml-4.00-ios/byterun/Makefile.common	2012-05-05 17:26:16.000000000 +0400
@@ -59,6 +59,14 @@
 	  sed -f ../tools/cleanup-header $$i > $(LIBDIR)/caml/$$i; \
 	done
 	cp ld.conf $(LIBDIR)/ld.conf
+
+
+installopt:
+	if test -d $(LIBDIR)/caml; then : ; else mkdir $(LIBDIR)/caml; fi
+	for i in $(PUBLIC_INCLUDES); do \
+	   sed -f ../tools/cleanup-header $$i > $(LIBDIR)/caml/$$i; \
+	 done
+
 .PHONY: install
 
 install:: install-$(RUNTIMED)
diff -urN ocaml-4.00/byterun/backtrace.c ocaml-4.00-ios/byterun/backtrace.c
--- ocaml-4.00/byterun/backtrace.c	2012-04-26 23:17:55.000000000 +0400
+++ ocaml-4.00-ios/byterun/backtrace.c	2012-05-09 00:20:48.000000000 +0400
@@ -274,6 +274,11 @@
   }
 }
 
+CAMLexport char** caml_print_get_exception_backtrace(void) {
+	caml_print_exception_backtrace();
+	return NULL;
+}
+
 /* Convert the backtrace to a data structure usable from OCaml */
 
 CAMLprim value caml_get_exception_backtrace(value unit)
diff -urN ocaml-4.00/byterun/backtrace.h ocaml-4.00-ios/byterun/backtrace.h
--- ocaml-4.00/byterun/backtrace.h	2012-04-26 23:17:55.000000000 +0400
+++ ocaml-4.00-ios/byterun/backtrace.h	2012-05-09 00:18:10.000000000 +0400
@@ -29,5 +29,6 @@
 extern void caml_stash_backtrace(value exn, code_t pc, value * sp);
 #endif
 CAMLextern void caml_print_exception_backtrace(void);
+CAMLextern char** caml_print_get_exception_backtrace(void);
 
 #endif /* CAML_BACKTRACE_H */
diff -urN ocaml-4.00/byterun/fail.h ocaml-4.00-ios/byterun/fail.h
--- ocaml-4.00/byterun/fail.h	2012-04-26 23:17:55.000000000 +0400
+++ ocaml-4.00-ios/byterun/fail.h	2012-05-09 00:19:51.000000000 +0400
@@ -62,6 +62,9 @@
 extern "C" {
 #endif
 
+typedef void (*uncaught_exception_callback_t)(const char* exn,int bc,char** bv);
+extern uncaught_exception_callback_t uncaught_exception_callback;
+
 CAMLextern void caml_raise (value bucket) Noreturn;
 CAMLextern void caml_raise_constant (value tag) Noreturn;
 CAMLextern void caml_raise_with_arg (value tag, value arg) Noreturn;
diff -urN ocaml-4.00/byterun/printexc.c ocaml-4.00-ios/byterun/printexc.c
--- ocaml-4.00/byterun/printexc.c	2012-04-26 23:17:55.000000000 +0400
+++ ocaml-4.00-ios/byterun/printexc.c	2012-05-09 00:22:00.000000000 +0400
@@ -26,6 +26,8 @@
 #include "mlvalues.h"
 #include "printexc.h"
 
+uncaught_exception_callback_t uncaught_exception_callback = NULL;
+
 struct stringbuf {
   char * ptr;
   char * end;
@@ -113,15 +115,22 @@
   caml_backtrace_pos = saved_backtrace_pos;
   /* Display the uncaught exception */
   fprintf(stderr, "Fatal error: exception %s\n", msg);
-  free(msg);
   /* Display the backtrace if available */
+	char **backtraces = NULL;
   if (caml_backtrace_active
 #ifndef NATIVE_CODE
       && !caml_debugger_in_use
 #endif
       ) {
-    caml_print_exception_backtrace();
+    backtraces = caml_print_get_exception_backtrace();
   }
   /* Terminate the process */
+	if (uncaught_exception_callback != NULL) uncaught_exception_callback(msg,caml_backtrace_active ? caml_backtrace_pos : 0,backtraces);
+  free(msg);
+	if (backtraces != NULL) {
+		int i;
+		for (i = 0; i < caml_backtrace_pos; i++) if (backtraces[i]) free(backtraces[i]);
+		free(backtraces);
+	};
   exit(2);
 }
diff -urN ocaml-4.00/config/Makefile ocaml-4.00-ios/config/Makefile
--- ocaml-4.00/config/Makefile	1970-01-01 03:00:00.000000000 +0300
+++ ocaml-4.00-ios/config/Makefile	2012-05-11 12:03:18.000000000 +0400
@@ -0,0 +1,74 @@
+# generated by ./configure 
+PREFIX=/usr/local/ocaml/ios/4.00
+PLATFORM=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer
+SDK=$(PLATFORM)/SDKs/iPhoneOS5.1.sdk
+BINDIR=$(PREFIX)/bin
+LIBDIR=$(PREFIX)/lib
+STUBLIBDIR=$(LIBDIR)/stublibs
+MANDIR=$(PREFIX)/man
+MANEXT=1
+RANLIB=$(PLATFORM)/usr/bin/ranlib
+RANLIBCMD=$(RANLIB)
+ARCMD=$(PLATFORM)/usr/bin/ar
+SHARPBANGSCRIPTS=true
+BNG_ARCH=generic
+BNG_ASM_LEVEL=0
+PTHREAD_LINK=-cclib -pthread
+LIBBFD_LINK=-lbfd -ldl -liberty -lz
+#-mfloat-abi=softfp -mfpu=vfpv3 
+BYTECC=$(PLATFORM)/usr/bin/gcc -arch armv7 -isysroot $(SDK)
+#BYTECCCOMPOPTS=-fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D__ARM_EABI__
+BYTECCCOMPOPTS=-fno-defer-pop -no-cpp-precomp -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D__ARM_EABI__
+BYTECCLINKOPTS= -Wl
+BYTECCLIBS= -lpthread
+BYTECCRPATH=-Wl,-rpath,
+EXE=
+SUPPORTS_SHARED_LIBRARIES=false
+#SHAREDCCCOMPOPTS=-fPIC
+MKSHAREDLIBRPATH=-Wl,-rpath,
+NATDYNLINKOPTS=-Wl
+SYSLIB=-l$(1)
+#ml let syslib x = "-l"^x;;
+
+### How to build a static library
+MKLIB=$(ARCMD) rc $(1) $(2); $(RANLIB) $(1)
+#ml let mklib out files opts = Printf.sprintf "ar rc %s %s %s; ranlib %s" out opts files out;;
+ARCH=arm
+MODEL=armv7
+SYSTEM=linux_eabihf
+NATIVECC=$(BYTECC)
+NATIVECCCOMPOPTS=-Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D__ARM_EABI__
+NATIVECCPROFOPTS=-Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D__ARM_EABI__
+NATIVECCLINKOPTS=
+NATIVECCRPATH=-Wl,-rpath,
+NATIVECCLIBS= -lm  -ldl
+ASM=$(NATIVECC) -D__ARM_EABI__ -c 
+ASPP=$(ASM)
+ASPPPROFFLAGS=-DPROFILING
+PROFILING=noprof
+DYNLINKOPTS= -ldl
+OTHERLIBRARIES=unix str num dynlink bigarray threads systhreads
+DEBUGGER=ocamldebugger
+CC_PROFILE=-pg
+SYSTHREAD_SUPPORT=false
+PARTIALLD=ld -r
+PACKLD=$(PARTIALLD) $(NATIVECCLINKOPTS) -o\ 
+DLLCCCOMPOPTS=
+IFLEXDIR=
+O=o
+A=a
+SO=so
+EXT_OBJ=.o
+EXT_ASM=.s
+EXT_LIB=.a
+EXT_DLL=.so
+EXTRALIBS=
+CCOMPTYPE=cc
+TOOLCHAIN=cc
+NATDYNLINK=false
+CMXS=cmxa
+MKEXE=$(BYTECC)
+MKDLL=$(NATIVECC) -bundle -flat_namespace -undefined suppress
+MKMAINDLL=$(MKDLL)
+RUNTIMED=noruntimed
+ASM_CFI_SUPPORTED=true
diff -urN ocaml-4.00/config/m.h ocaml-4.00-ios/config/m.h
--- ocaml-4.00/config/m.h	1970-01-01 03:00:00.000000000 +0300
+++ ocaml-4.00-ios/config/m.h	2012-05-05 17:26:16.000000000 +0400
@@ -0,0 +1,16 @@
+#ifndef __PIC__
+#  define ARCH_CODE32
+#endif
+#undef ARCH_SIXTYFOUR
+#define SIZEOF_INT 4
+#define SIZEOF_LONG 4
+#define SIZEOF_PTR 4
+#define SIZEOF_SHORT 2
+#define ARCH_INT64_TYPE long long
+#define ARCH_UINT64_TYPE unsigned long long
+#define ARCH_INT64_PRINTF_FORMAT "ll"
+#undef ARCH_BIG_ENDIAN
+#undef ARCH_ALIGN_DOUBLE
+#undef ARCH_ALIGN_INT64
+#undef NONSTANDARD_DIV_MOD
+#define ASM_CFI_SUPPORTED
diff -urN ocaml-4.00/config/s.h ocaml-4.00-ios/config/s.h
--- ocaml-4.00/config/s.h	1970-01-01 03:00:00.000000000 +0300
+++ ocaml-4.00-ios/config/s.h	2012-05-05 17:26:16.000000000 +0400
@@ -0,0 +1,51 @@
+#define OCAML_OS_TYPE "Unix"
+#define OCAML_STDLIB_DIR "/usr/local/ocaml/ios/4.00/lib"
+#define POSIX_SIGNALS
+#define HAS_C99_FLOAT_OPS
+#define HAS_GETRUSAGE
+#define HAS_TIMES
+#undef HAS_TERMCAP
+#define HAS_SOCKETS
+#define HAS_SOCKLEN_T
+#define HAS_INET_ATON
+#define HAS_IPV6
+#define HAS_UNISTD
+#define HAS_OFF_T
+#define HAS_DIRENT
+#define HAS_REWINDDIR
+#define HAS_LOCKF
+#define HAS_MKFIFO
+#define HAS_GETCWD
+#define HAS_GETWD
+#define HAS_GETPRIORITY
+#define HAS_UTIME
+#define HAS_UTIMES
+#define HAS_DUP2
+#define HAS_FCHMOD
+#define HAS_TRUNCATE
+#define HAS_SYS_SELECT_H
+#define HAS_SELECT
+#define HAS_SYMLINK
+#define HAS_WAITPID
+#define HAS_WAIT4
+#define HAS_GETGROUPS
+#define HAS_SETGROUPS
+#define HAS_INITGROUPS
+#define HAS_TERMIOS
+#define HAS_ASYNC_IO
+#define HAS_SETITIMER
+#define HAS_GETHOSTNAME
+#define HAS_UNAME
+#define HAS_GETTIMEOFDAY
+#define HAS_MKTIME
+#define HAS_SETSID
+#define HAS_PUTENV
+#define HAS_LOCALE
+#undef SUPPORT_DYNAMIC_LINKING
+#define HAS_MMAP
+#define HAS_PWRITE
+#undef HAS_GETHOSTBYNAME_R
+#undef HAS_GETHOSTBYADDR_R
+#undef HAS_STACK_OVERFLOW_DETECTION
+#define HAS_SIGWAIT
+#undef HAS_LIBBFD
diff -urN ocaml-4.00/otherlibs/Makefile.shared ocaml-4.00-ios/otherlibs/Makefile.shared
--- ocaml-4.00/otherlibs/Makefile.shared	2012-04-26 23:17:59.000000000 +0400
+++ ocaml-4.00-ios/otherlibs/Makefile.shared	2012-05-05 17:26:16.000000000 +0400
@@ -20,7 +20,7 @@
 
 # Compilation options
 CC=$(BYTECC)
-CAMLRUN=$(ROOTDIR)/boot/ocamlrun
+CAMLRUN=ocamlrun
 COMPFLAGS=-warn-error A -g $(EXTRACAMLFLAGS)
 MKLIB=$(CAMLRUN) $(ROOTDIR)/tools/ocamlmklib
 
@@ -65,9 +65,13 @@
 	if test -n "$(HEADERS)"; then cp $(HEADERS) $(LIBDIR)/caml/; fi
 
 installopt:
+	cp lib$(CLIBNAME).$(A) $(LIBDIR)/
+	cd $(LIBDIR); $(RANLIB) lib$(CLIBNAME).$(A)
 	cp $(CAMLOBJS_NAT) $(LIBNAME).cmxa $(LIBNAME).$(A) $(LIBDIR)/
 	cd $(LIBDIR); $(RANLIB) $(LIBNAME).a
+	cp $(CMIFILES) $(CMIFILES:.cmi=.mli) $(LIBDIR)/
 	if test -f $(LIBNAME).cmxs; then cp $(LIBNAME).cmxs $(LIBDIR)/; fi
+	if test -n "$(HEADERS)"; then cp $(HEADERS) $(LIBDIR)/caml/; fi
 
 partialclean:
 	rm -f *.cm*
diff -urN ocaml-4.00/otherlibs/dynlink/Makefile ocaml-4.00-ios/otherlibs/dynlink/Makefile
--- ocaml-4.00/otherlibs/dynlink/Makefile	2012-04-26 23:17:58.000000000 +0400
+++ ocaml-4.00-ios/otherlibs/dynlink/Makefile	2012-05-05 17:26:16.000000000 +0400
@@ -17,7 +17,7 @@
 
 include ../../config/Makefile
 
-CAMLC=../../boot/ocamlrun ../../ocamlc
+CAMLC=../../ocamlcomp.sh
 CAMLOPT=../../ocamlcompopt.sh
 INCLUDES=-I ../../utils -I ../../typing -I ../../bytecomp -I ../../asmcomp
 COMPFLAGS=-warn-error A -I ../../stdlib $(INCLUDES)
diff -urN ocaml-4.00/otherlibs/systhreads/Makefile ocaml-4.00-ios/otherlibs/systhreads/Makefile
--- ocaml-4.00/otherlibs/systhreads/Makefile	2012-04-26 23:17:59.000000000 +0400
+++ ocaml-4.00-ios/otherlibs/systhreads/Makefile	2012-05-05 17:26:16.000000000 +0400
@@ -17,7 +17,7 @@
 
 CAMLC=../../ocamlcomp.sh -I ../unix
 CAMLOPT=../../ocamlcompopt.sh -I ../unix
-MKLIB=../../boot/ocamlrun ../../tools/ocamlmklib
+MKLIB=../../tools/ocamlmklib
 COMPFLAGS=-warn-error A -g
 
 BYTECODE_C_OBJS=st_stubs_b.o
@@ -61,7 +61,6 @@
 # modular to me this way. -- Alain
 
 
-$(THREAD_OBJS:.cmo=.cmx): ../../ocamlopt
 
 partialclean:
 	rm -f *.cm*
@@ -80,6 +79,10 @@
 	cp threads.h $(LIBDIR)/caml/threads.h
 
 installopt:
+	if test -d $(LIBDIR)/threads; then :; else mkdir $(LIBDIR)/threads; fi
+	cp $(THREAD_OBJS:.cmo=.cmi) $(LIBDIR)/threads
+	cp thread.mli mutex.mli condition.mli event.mli threadUnix.mli $(LIBDIR)
+	cp threads.h $(LIBDIR)/caml/threads.h
 	cp libthreadsnat.a $(LIBDIR)/libthreadsnat.a
 	cd $(LIBDIR); $(RANLIB) libthreadsnat.a
 	cp $(THREAD_OBJS:.cmo=.cmx) threads.cmxa threads.a $(LIBDIR)/threads
diff -urN ocaml-4.00/otherlibs/threads/pervasives.ml ocaml-4.00-ios/otherlibs/threads/pervasives.ml
--- ocaml-4.00/otherlibs/threads/pervasives.ml	2012-04-26 23:17:59.000000000 +0400
+++ ocaml-4.00-ios/otherlibs/threads/pervasives.ml	2012-05-11 10:55:29.000000000 +0400
@@ -87,29 +87,29 @@
 external (-.) : float -> float -> float = "%subfloat"
 external ( *. ) : float -> float -> float = "%mulfloat"
 external (/.) : float -> float -> float = "%divfloat"
-external ( ** ) : float -> float -> float = "caml_power_float" "pow" "float"
-external exp : float -> float = "caml_exp_float" "exp" "float"
-external expm1 : float -> float = "caml_expm1_float" "caml_expm1" "float"
-external acos : float -> float = "caml_acos_float" "acos" "float"
-external asin : float -> float = "caml_asin_float" "asin" "float"
-external atan : float -> float = "caml_atan_float" "atan" "float"
-external atan2 : float -> float -> float = "caml_atan2_float" "atan2" "float"
-external hypot : float -> float -> float = "caml_hypot_float" "caml_hypot" "float"
-external cos : float -> float = "caml_cos_float" "cos" "float"
-external cosh : float -> float = "caml_cosh_float" "cosh" "float"
-external log : float -> float = "caml_log_float" "log" "float"
-external log10 : float -> float = "caml_log10_float" "log10" "float"
-external log1p : float -> float = "caml_log1p_float" "caml_log1p" "float"
-external sin : float -> float = "caml_sin_float" "sin" "float"
-external sinh : float -> float = "caml_sinh_float" "sinh" "float"
-external sqrt : float -> float = "caml_sqrt_float" "sqrt" "float"
-external tan : float -> float = "caml_tan_float" "tan" "float"
-external tanh : float -> float = "caml_tanh_float" "tanh" "float"
-external ceil : float -> float = "caml_ceil_float" "ceil" "float"
-external floor : float -> float = "caml_floor_float" "floor" "float"
+external ( ** ) : float -> float -> float = "caml_power_float" (* "pow" "float" *)
+external exp : float -> float = "caml_exp_float" (* "exp" "float" *)
+external expm1 : float -> float = "caml_expm1_float" (* "caml_expm1" "float" *)
+external acos : float -> float = "caml_acos_float" (* "acos" "float" *)
+external asin : float -> float = "caml_asin_float" (* "asin" "float" *)
+external atan : float -> float = "caml_atan_float" (* "atan" "float" *)
+external atan2 : float -> float -> float = "caml_atan2_float" (* "atan2" "float" *)
+external hypot : float -> float -> float = "caml_hypot_float" (* "caml_hypot" "float" *)
+external cos : float -> float = "caml_cos_float" (* "cos" "float" *)
+external cosh : float -> float = "caml_cosh_float" (* "cosh" "float" *)
+external log : float -> float = "caml_log_float" (* "log" "float" *)
+external log10 : float -> float = "caml_log10_float" (* "log10" "float" *)
+external log1p : float -> float = "caml_log1p_float" (* "caml_log1p" "float" *)
+external sin : float -> float = "caml_sin_float" (* "sin" "float" *)
+external sinh : float -> float = "caml_sinh_float" (* "sinh" "float" *)
+external sqrt : float -> float = "caml_sqrt_float" (* "sqrt" "float" *)
+external tan : float -> float = "caml_tan_float" (* "tan" "float" *)
+external tanh : float -> float = "caml_tanh_float" (* "tanh" "float" *)
+external ceil : float -> float = "caml_ceil_float" (* "ceil" "float" *)
+external floor : float -> float = "caml_floor_float" (* "floor" "float" *)
 external abs_float : float -> float = "%absfloat"
-external copysign : float -> float -> float = "caml_copysign_float" "caml_copysign" "float"
-external mod_float : float -> float -> float = "caml_fmod_float" "fmod" "float"
+external copysign : float -> float -> float = "caml_copysign_float" (* "caml_copysign" "float" *)
+external mod_float : float -> float -> float = "caml_fmod_float" (* "fmod" "float" *)
 external frexp : float -> float * int = "caml_frexp_float"
 external ldexp : float -> int -> float = "caml_ldexp_float"
 external modf : float -> float * float = "caml_modf_float"
diff -urN ocaml-4.00/stdlib/Makefile ocaml-4.00-ios/stdlib/Makefile
--- ocaml-4.00/stdlib/Makefile	2012-04-26 23:17:52.000000000 +0400
+++ ocaml-4.00-ios/stdlib/Makefile	2012-05-05 17:26:16.000000000 +0400
@@ -15,7 +15,7 @@
 
 include Makefile.shared
 
-allopt: stdlib.cmxa std_exit.cmx allopt-$(PROFILING)
+allopt: stdlib.cmxa std_exit.cmx camlheader camlheader_ur allopt-$(PROFILING)
 
 allopt-noprof:
 
@@ -26,6 +26,8 @@
 
 installopt-default:
 	cp stdlib.cmxa stdlib.a std_exit.o *.cmx $(LIBDIR)
+	cp stdlib.cmxa stdlib.a std_exit.o *.cmx *.cmi *.mli *.ml camlheader camlheader_ur $(LIBDIR)
+	cp stdlib.cmxa stdlib.a std_exit.o *.cmx $(LIBDIR)
 	cd $(LIBDIR); $(RANLIB) stdlib.a
 
 installopt-noprof:
diff -urN ocaml-4.00/stdlib/Makefile.shared ocaml-4.00-ios/stdlib/Makefile.shared
--- ocaml-4.00/stdlib/Makefile.shared	2012-04-26 23:17:52.000000000 +0400
+++ ocaml-4.00-ios/stdlib/Makefile.shared	2012-05-05 17:26:16.000000000 +0400
@@ -14,14 +14,12 @@
 # $Id: Makefile.shared 12383 2012-04-19 13:12:23Z xleroy $
 
 include ../config/Makefile
-RUNTIME=../boot/ocamlrun
-COMPILER=../ocamlc
-CAMLC=$(RUNTIME) $(COMPILER)
+RUNTIME=ocamlrun
+CAMLC=ocamlc.opt
 COMPFLAGS=-strict-sequence -g -warn-error A -nostdlib
-OPTCOMPILER=../ocamlopt
-CAMLOPT=$(RUNTIME) $(OPTCOMPILER)
+CAMLOPT=../ocamlopt.opt
 OPTCOMPFLAGS=-warn-error A -nostdlib -g
-CAMLDEP=../boot/ocamlrun ../tools/ocamldep
+CAMLDEP=ocamldep.opt
 
 OBJS=pervasives.cmo $(OTHERS)
 OTHERS=array.cmo list.cmo char.cmo string.cmo sys.cmo \
@@ -80,11 +78,6 @@
 .ml.p.cmx:
 	$(CAMLOPT) $(OPTCOMPFLAGS) `./Compflags $@` -p -c -o $*.p.cmx $<
 
-# Dependencies on the compiler
-$(OBJS) std_exit.cmo: $(COMPILER)
-$(OBJS:.cmo=.cmi) std_exit.cmi: $(COMPILER)
-$(OBJS:.cmo=.cmx) std_exit.cmx: $(OPTCOMPILER)
-$(OBJS:.cmo=.p.cmx) std_exit.p.cmx: $(OPTCOMPILER)
 
 # Dependencies on Pervasives (not tracked by ocamldep)
 $(OBJS) std_exit.cmo: pervasives.cmi
diff -urN ocaml-4.00/stdlib/Makefile.shared.orig ocaml-4.00-ios/stdlib/Makefile.shared.orig
--- ocaml-4.00/stdlib/Makefile.shared.orig	1970-01-01 03:00:00.000000000 +0300
+++ ocaml-4.00-ios/stdlib/Makefile.shared.orig	2012-04-26 23:17:52.000000000 +0400
@@ -0,0 +1,105 @@
+#########################################################################
+#                                                                       #
+#                                 OCaml                                 #
+#                                                                       #
+#            Xavier Leroy, projet Cristal, INRIA Rocquencourt           #
+#                                                                       #
+#   Copyright 1999 Institut National de Recherche en Informatique et    #
+#   en Automatique.  All rights reserved.  This file is distributed     #
+#   under the terms of the GNU Library General Public License, with     #
+#   the special exception on linking described in file ../LICENSE.      #
+#                                                                       #
+#########################################################################
+
+# $Id: Makefile.shared 12383 2012-04-19 13:12:23Z xleroy $
+
+include ../config/Makefile
+RUNTIME=../boot/ocamlrun
+COMPILER=../ocamlc
+CAMLC=$(RUNTIME) $(COMPILER)
+COMPFLAGS=-strict-sequence -g -warn-error A -nostdlib
+OPTCOMPILER=../ocamlopt
+CAMLOPT=$(RUNTIME) $(OPTCOMPILER)
+OPTCOMPFLAGS=-warn-error A -nostdlib -g
+CAMLDEP=../boot/ocamlrun ../tools/ocamldep
+
+OBJS=pervasives.cmo $(OTHERS)
+OTHERS=array.cmo list.cmo char.cmo string.cmo sys.cmo \
+  sort.cmo marshal.cmo obj.cmo \
+  int32.cmo int64.cmo nativeint.cmo \
+  lexing.cmo parsing.cmo \
+  set.cmo map.cmo stack.cmo queue.cmo \
+  camlinternalLazy.cmo lazy.cmo stream.cmo \
+  buffer.cmo printf.cmo \
+  arg.cmo printexc.cmo gc.cmo \
+  digest.cmo random.cmo hashtbl.cmo format.cmo scanf.cmo callback.cmo \
+  camlinternalOO.cmo oo.cmo camlinternalMod.cmo \
+  genlex.cmo weak.cmo \
+  filename.cmo complex.cmo \
+  arrayLabels.cmo listLabels.cmo stringLabels.cmo moreLabels.cmo stdLabels.cmo
+
+all: stdlib.cma std_exit.cmo camlheader camlheader_ur
+
+install: install-$(RUNTIMED)
+	cp stdlib.cma std_exit.cmo *.cmi *.mli *.ml camlheader camlheader_ur \
+	  $(LIBDIR)
+
+install-noruntimed:
+.PHONY: install-noruntimed
+
+install-runtimed: camlheaderd
+	cp camlheaderd $(LIBDIR)
+.PHONY: install-runtimed
+
+stdlib.cma: $(OBJS)
+	$(CAMLC) -a -o stdlib.cma $(OBJS)
+
+stdlib.cmxa: $(OBJS:.cmo=.cmx)
+	$(CAMLOPT) -a -o stdlib.cmxa $(OBJS:.cmo=.cmx)
+
+sys.ml: sys.mlp ../VERSION
+	sed -e "s|%%VERSION%%|`sed -e 1q ../VERSION`|" sys.mlp >sys.ml
+
+clean::
+	rm -f sys.ml
+
+clean::
+	rm -f camlheader camlheader_ur camlheaderd
+
+.SUFFIXES: .mli .ml .cmi .cmo .cmx .p.cmx
+
+.mli.cmi:
+	$(CAMLC) $(COMPFLAGS) `./Compflags $@` -c $<
+
+.ml.cmo:
+	$(CAMLC) $(COMPFLAGS) `./Compflags $@` -c $<
+
+.ml.cmx:
+	$(CAMLOPT) $(OPTCOMPFLAGS) `./Compflags $@` -c $<
+
+.ml.p.cmx:
+	$(CAMLOPT) $(OPTCOMPFLAGS) `./Compflags $@` -p -c -o $*.p.cmx $<
+
+# Dependencies on the compiler
+$(OBJS) std_exit.cmo: $(COMPILER)
+$(OBJS:.cmo=.cmi) std_exit.cmi: $(COMPILER)
+$(OBJS:.cmo=.cmx) std_exit.cmx: $(OPTCOMPILER)
+$(OBJS:.cmo=.p.cmx) std_exit.p.cmx: $(OPTCOMPILER)
+
+# Dependencies on Pervasives (not tracked by ocamldep)
+$(OBJS) std_exit.cmo: pervasives.cmi
+$(OTHERS:.cmo=.cmi) std_exit.cmi: pervasives.cmi
+$(OBJS:.cmo=.cmx) std_exit.cmx: pervasives.cmi
+$(OBJS:.cmo=.p.cmx) std_exit.p.cmx: pervasives.cmi
+$(OTHERS:.cmo=.cmx) std_exit.cmx: pervasives.cmx
+$(OTHERS:.cmo=.p.cmx) std_exit.p.cmx: pervasives.cmx
+
+clean::
+	rm -f *.cm* *.$(O) *.$(A)
+	rm -f *~
+
+include .depend
+
+depend:
+	$(CAMLDEP) *.mli *.ml > .depend
+	$(CAMLDEP) *.ml | sed -e 's/\.cmx/.p.cmx/g' >>.depend
diff -urN ocaml-4.00/stdlib/camlinternalOO.ml ocaml-4.00-ios/stdlib/camlinternalOO.ml
--- ocaml-4.00/stdlib/camlinternalOO.ml	2012-04-26 23:17:52.000000000 +0400
+++ ocaml-4.00-ios/stdlib/camlinternalOO.ml	2012-05-05 17:26:16.000000000 +0400
@@ -80,7 +80,8 @@
   (* reduce to 31 bits *)
   accu := !accu land (1 lsl 31 - 1);
   (* make it signed for 64 bits architectures *)
-  let tag = if !accu > 0x3FFFFFFF then !accu - (1 lsl 31) else !accu in
+  let tag = !accu in
+(*   let tag = if !accu > 0x3FFFFFFF then !accu - (1 lsl 31) else !accu in *)
   (* Printf.eprintf "%s = %d\n" s tag; flush stderr; *)
   magic tag
 
diff -urN ocaml-4.00/stdlib/pervasives.ml ocaml-4.00-ios/stdlib/pervasives.ml
--- ocaml-4.00/stdlib/pervasives.ml	2012-04-26 23:17:52.000000000 +0400
+++ ocaml-4.00-ios/stdlib/pervasives.ml	2012-05-11 10:52:22.000000000 +0400
@@ -72,7 +72,7 @@
 external ( lsr ) : int -> int -> int = "%lsrint"
 external ( asr ) : int -> int -> int = "%asrint"
 
-let min_int = 1 lsl (if 1 lsl 31 = 0 then 30 else 62)
+let min_int = 1 lsl 30
 let max_int = min_int - 1
 
 (* Floating-point operations *)
@@ -83,31 +83,29 @@
 external ( -. ) : float -> float -> float = "%subfloat"
 external ( *. ) : float -> float -> float = "%mulfloat"
 external ( /. ) : float -> float -> float = "%divfloat"
-external ( ** ) : float -> float -> float = "caml_power_float" "pow" "float"
-external exp : float -> float = "caml_exp_float" "exp" "float"
-external expm1 : float -> float = "caml_expm1_float" "caml_expm1" "float"
-external acos : float -> float = "caml_acos_float" "acos" "float"
-external asin : float -> float = "caml_asin_float" "asin" "float"
-external atan : float -> float = "caml_atan_float" "atan" "float"
-external atan2 : float -> float -> float = "caml_atan2_float" "atan2" "float"
-external hypot : float -> float -> float
-               = "caml_hypot_float" "caml_hypot" "float"
-external cos : float -> float = "caml_cos_float" "cos" "float"
-external cosh : float -> float = "caml_cosh_float" "cosh" "float"
-external log : float -> float = "caml_log_float" "log" "float"
-external log10 : float -> float = "caml_log10_float" "log10" "float"
-external log1p : float -> float = "caml_log1p_float" "caml_log1p" "float"
-external sin : float -> float = "caml_sin_float" "sin" "float"
-external sinh : float -> float = "caml_sinh_float" "sinh" "float"
-external sqrt : float -> float = "caml_sqrt_float" "sqrt" "float"
-external tan : float -> float = "caml_tan_float" "tan" "float"
-external tanh : float -> float = "caml_tanh_float" "tanh" "float"
-external ceil : float -> float = "caml_ceil_float" "ceil" "float"
-external floor : float -> float = "caml_floor_float" "floor" "float"
+external ( ** ) : float -> float -> float = "caml_power_float" (* "pow" "float" *)
+external exp : float -> float = "caml_exp_float" (* "exp" "float" *)
+external expm1 : float -> float = "caml_expm1_float" (* "caml_expm1" "float" *)
+external acos : float -> float = "caml_acos_float" (* "acos" "float" *)
+external asin : float -> float = "caml_asin_float" (* "asin" "float" *)
+external atan : float -> float = "caml_atan_float" (* "atan" "float" *)
+external atan2 : float -> float -> float = "caml_atan2_float" (* "atan2" "float" *)
+external hypot : float -> float -> float = "caml_hypot_float" (* "caml_hypot" "float" *)
+external cos : float -> float = "caml_cos_float" (* "cos" "float" *)
+external cosh : float -> float = "caml_cosh_float" (* "cosh" "float" *)
+external log : float -> float = "caml_log_float" (* "log" "float" *)
+external log10 : float -> float = "caml_log10_float" (* "log10" "float" *)
+external log1p : float -> float = "caml_log1p_float" (* "caml_log1p" "float" *)
+external sin : float -> float = "caml_sin_float" (* "sin" "float" *)
+external sinh : float -> float = "caml_sinh_float" (* "sinh" "float" *)
+external sqrt : float -> float = "caml_sqrt_float" (* "sqrt" "float" *)
+external tan : float -> float = "caml_tan_float" (* "tan" "float" *)
+external tanh : float -> float = "caml_tanh_float" (* "tanh" "float" *)
+external ceil : float -> float = "caml_ceil_float" (* "ceil" "float" *)
+external floor : float -> float = "caml_floor_float" (* "floor" "float" *)
 external abs_float : float -> float = "%absfloat"
-external copysign : float -> float -> float
-                  = "caml_copysign_float" "caml_copysign" "float"
-external mod_float : float -> float -> float = "caml_fmod_float" "fmod" "float"
+external copysign : float -> float -> float = "caml_copysign_float" (* "caml_copysign" "float" *)
+external mod_float : float -> float -> float = "caml_fmod_float" (* "fmod" "float" *)
 external frexp : float -> float * int = "caml_frexp_float"
 external ldexp : float -> int -> float = "caml_ldexp_float"
 external modf : float -> float * float = "caml_modf_float"
diff -urN ocaml-4.00/stdlib/pervasives.mli ocaml-4.00-ios/stdlib/pervasives.mli
--- ocaml-4.00/stdlib/pervasives.mli	2012-05-05 17:00:39.000000000 +0400
+++ ocaml-4.00-ios/stdlib/pervasives.mli	2012-05-11 10:57:51.000000000 +0400
@@ -261,82 +261,81 @@
 external ( /. ) : float -> float -> float = "%divfloat"
 (** Floating-point division. *)
 
-external ( ** ) : float -> float -> float = "caml_power_float" "pow" "float"
+external ( ** ) : float -> float -> float = "caml_power_float" (* "pow" "float" *)
 (** Exponentiation. *)
 
-external sqrt : float -> float = "caml_sqrt_float" "sqrt" "float"
+external sqrt : float -> float = "caml_sqrt_float" (* "sqrt" "float" *)
 (** Square root. *)
 
-external exp : float -> float = "caml_exp_float" "exp" "float"
+external exp : float -> float = "caml_exp_float" (* "exp" "float" *)
 (** Exponential. *)
 
-external log : float -> float = "caml_log_float" "log" "float"
+external log : float -> float = "caml_log_float" (* "log" "float" *)
 (** Natural logarithm. *)
 
-external log10 : float -> float = "caml_log10_float" "log10" "float"
+external log10 : float -> float = "caml_log10_float" (* "log10" "float" *)
 (** Base 10 logarithm. *)
 
-external expm1 : float -> float = "caml_expm1_float" "caml_expm1" "float"
+external expm1 : float -> float = "caml_expm1_float" (* "caml_expm1" "float" *)
 (** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results
     even if [x] is close to [0.0].
     @since 3.12.0
 *)
 
-external log1p : float -> float = "caml_log1p_float" "caml_log1p" "float"
+external log1p : float -> float = "caml_log1p_float" (* "caml_log1p" "float" *)
 (** [log1p x] computes [log(1.0 +. x)] (natural logarithm),
     giving numerically-accurate results even if [x] is close to [0.0].
     @since 3.12.0
 *)
 
-external cos : float -> float = "caml_cos_float" "cos" "float"
+external cos : float -> float = "caml_cos_float" (* "cos" "float" *)
 (** Cosine.  Argument is in radians. *)
 
-external sin : float -> float = "caml_sin_float" "sin" "float"
+external sin : float -> float = "caml_sin_float" (* "sin" "float" *)
 (** Sine.  Argument is in radians. *)
 
-external tan : float -> float = "caml_tan_float" "tan" "float"
+external tan : float -> float = "caml_tan_float" (* "tan" "float" *)
 (** Tangent.  Argument is in radians. *)
 
-external acos : float -> float = "caml_acos_float" "acos" "float"
+external acos : float -> float = "caml_acos_float" (* "acos" "float" *)
 (** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].
     Result is in radians and is between [0.0] and [pi]. *)
 
-external asin : float -> float = "caml_asin_float" "asin" "float"
+external asin : float -> float = "caml_asin_float" (* "asin" "float" *)
 (** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].
     Result is in radians and is between [-pi/2] and [pi/2]. *)
 
-external atan : float -> float = "caml_atan_float" "atan" "float"
+external atan : float -> float = "caml_atan_float" (* "atan" "float" *)
 (** Arc tangent.
     Result is in radians and is between [-pi/2] and [pi/2]. *)
 
-external atan2 : float -> float -> float = "caml_atan2_float" "atan2" "float"
+external atan2 : float -> float -> float = "caml_atan2_float" (* "atan2" "float" *) 
 (** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]
     and [y] are used to determine the quadrant of the result.
     Result is in radians and is between [-pi] and [pi]. *)
 
-external hypot : float -> float -> float
-               = "caml_hypot_float" "caml_hypot" "float"
+external hypot : float -> float -> float = "caml_hypot_float" (* "caml_hypot" "float" *)
 (** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length
   of the hypotenuse of a right-angled triangle with sides of length
   [x] and [y], or, equivalently, the distance of the point [(x,y)]
   to origin.
   @since 4.00.0  *)
 
-external cosh : float -> float = "caml_cosh_float" "cosh" "float"
+external cosh : float -> float = "caml_cosh_float" (* "cosh" "float" *)
 (** Hyperbolic cosine.  Argument is in radians. *)
 
-external sinh : float -> float = "caml_sinh_float" "sinh" "float"
+external sinh : float -> float = "caml_sinh_float" (* "sinh" "float" *)
 (** Hyperbolic sine.  Argument is in radians. *)
 
-external tanh : float -> float = "caml_tanh_float" "tanh" "float"
+external tanh : float -> float = "caml_tanh_float" (* "tanh" "float" *)
 (** Hyperbolic tangent.  Argument is in radians. *)
 
-external ceil : float -> float = "caml_ceil_float" "ceil" "float"
+external ceil : float -> float = "caml_ceil_float" (* "ceil" "float" *)
 (** Round above to an integer value.
     [ceil f] returns the least integer value greater than or equal to [f].
     The result is returned as a float. *)
 
-external floor : float -> float = "caml_floor_float" "floor" "float"
+external floor : float -> float = "caml_floor_float" (* "floor" "float" *)
 (** Round below to an integer value.
     [floor f] returns the greatest integer value less than or
     equal to [f].
@@ -346,14 +345,15 @@
 (** [abs_float f] returns the absolute value of [f]. *)
 
 external copysign : float -> float -> float
-                  = "caml_copysign_float" "caml_copysign" "float"
+                  = "caml_copysign_float" (* "caml_copysign" "float" *)
 (** [copysign x y] returns a float whose absolute value is that of [x]
   and whose sign is that of [y].  If [x] is [nan], returns [nan].
   If [y] is [nan], returns either [x] or [-. x], but it is not
   specified which.
   @since 4.00.0  *)
 
-external mod_float : float -> float -> float = "caml_fmod_float" "fmod" "float"
+external mod_float : float -> float -> float = "caml_fmod_float" (* "fmod"
+"float" *)
 (** [mod_float a b] returns the remainder of [a] with respect to
    [b].  The returned value is [a -. n *. b], where [n]
    is the quotient [a /. b] rounded towards zero to an integer. *)
diff -urN ocaml-4.00/tools/Makefile.shared ocaml-4.00-ios/tools/Makefile.shared
--- ocaml-4.00/tools/Makefile.shared	2012-04-26 23:17:53.000000000 +0400
+++ ocaml-4.00-ios/tools/Makefile.shared	2012-05-05 17:26:16.000000000 +0400
@@ -14,10 +14,12 @@
 
 include ../config/Makefile
 
-CAMLRUN=../boot/ocamlrun
-CAMLC=$(CAMLRUN) ../boot/ocamlc -strict-sequence -nostdlib -I ../boot
-CAMLOPT=$(CAMLRUN) ../ocamlopt -nostdlib -I ../stdlib
-CAMLLEX=$(CAMLRUN) ../boot/ocamllex
+CAMLRUN=ocamlrun
+CAMLC=ocamlc.opt -strict-sequence 
+#-nostdlib -I ../boot
+CAMLOPT=ocamlopt.opt
+#-nostdlib -I ../stdlib
+CAMLLEX=ocamllex
 INCLUDES=-I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp \
 	 -I ../driver
 COMPFLAGS= -warn-error A $(INCLUDES)
